
cargador_baterias.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002980  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002a8c  08002a8c  00012a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ab8  08002ab8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002ab8  08002ab8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ab8  08002ab8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ab8  08002ab8  00012ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002abc  08002abc  00012abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002ac0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000010  08002ad0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08002ad0  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009f40  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cc8  00000000  00000000  00029fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ae0  00000000  00000000  0002bc88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000852  00000000  00000000  0002c768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017175  00000000  00000000  0002cfba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c139  00000000  00000000  0004412f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086ba1  00000000  00000000  00050268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002c6c  00000000  00000000  000d6e0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000d9a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a74 	.word	0x08002a74

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08002a74 	.word	0x08002a74

0800014c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000150:	4b17      	ldr	r3, [pc, #92]	; (80001b0 <MX_CAN_Init+0x64>)
 8000152:	4a18      	ldr	r2, [pc, #96]	; (80001b4 <MX_CAN_Init+0x68>)
 8000154:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000156:	4b16      	ldr	r3, [pc, #88]	; (80001b0 <MX_CAN_Init+0x64>)
 8000158:	2210      	movs	r2, #16
 800015a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800015c:	4b14      	ldr	r3, [pc, #80]	; (80001b0 <MX_CAN_Init+0x64>)
 800015e:	2200      	movs	r2, #0
 8000160:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000162:	4b13      	ldr	r3, [pc, #76]	; (80001b0 <MX_CAN_Init+0x64>)
 8000164:	2200      	movs	r2, #0
 8000166:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000168:	4b11      	ldr	r3, [pc, #68]	; (80001b0 <MX_CAN_Init+0x64>)
 800016a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800016e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000170:	4b0f      	ldr	r3, [pc, #60]	; (80001b0 <MX_CAN_Init+0x64>)
 8000172:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000176:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000178:	4b0d      	ldr	r3, [pc, #52]	; (80001b0 <MX_CAN_Init+0x64>)
 800017a:	2200      	movs	r2, #0
 800017c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800017e:	4b0c      	ldr	r3, [pc, #48]	; (80001b0 <MX_CAN_Init+0x64>)
 8000180:	2200      	movs	r2, #0
 8000182:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000184:	4b0a      	ldr	r3, [pc, #40]	; (80001b0 <MX_CAN_Init+0x64>)
 8000186:	2200      	movs	r2, #0
 8000188:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800018a:	4b09      	ldr	r3, [pc, #36]	; (80001b0 <MX_CAN_Init+0x64>)
 800018c:	2200      	movs	r2, #0
 800018e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000190:	4b07      	ldr	r3, [pc, #28]	; (80001b0 <MX_CAN_Init+0x64>)
 8000192:	2200      	movs	r2, #0
 8000194:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000196:	4b06      	ldr	r3, [pc, #24]	; (80001b0 <MX_CAN_Init+0x64>)
 8000198:	2200      	movs	r2, #0
 800019a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <MX_CAN_Init+0x64>)
 800019e:	f000 fb5d 	bl	800085c <HAL_CAN_Init>
 80001a2:	4603      	mov	r3, r0
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d001      	beq.n	80001ac <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80001a8:	f000 f9f2 	bl	8000590 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80001ac:	bf00      	nop
 80001ae:	bd80      	pop	{r7, pc}
 80001b0:	2000002c 	.word	0x2000002c
 80001b4:	40006400 	.word	0x40006400

080001b8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b088      	sub	sp, #32
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001c0:	f107 0310 	add.w	r3, r7, #16
 80001c4:	2200      	movs	r2, #0
 80001c6:	601a      	str	r2, [r3, #0]
 80001c8:	605a      	str	r2, [r3, #4]
 80001ca:	609a      	str	r2, [r3, #8]
 80001cc:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a20      	ldr	r2, [pc, #128]	; (8000254 <HAL_CAN_MspInit+0x9c>)
 80001d4:	4293      	cmp	r3, r2
 80001d6:	d139      	bne.n	800024c <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80001d8:	4b1f      	ldr	r3, [pc, #124]	; (8000258 <HAL_CAN_MspInit+0xa0>)
 80001da:	69db      	ldr	r3, [r3, #28]
 80001dc:	4a1e      	ldr	r2, [pc, #120]	; (8000258 <HAL_CAN_MspInit+0xa0>)
 80001de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80001e2:	61d3      	str	r3, [r2, #28]
 80001e4:	4b1c      	ldr	r3, [pc, #112]	; (8000258 <HAL_CAN_MspInit+0xa0>)
 80001e6:	69db      	ldr	r3, [r3, #28]
 80001e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80001ec:	60fb      	str	r3, [r7, #12]
 80001ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80001f0:	4b19      	ldr	r3, [pc, #100]	; (8000258 <HAL_CAN_MspInit+0xa0>)
 80001f2:	699b      	ldr	r3, [r3, #24]
 80001f4:	4a18      	ldr	r2, [pc, #96]	; (8000258 <HAL_CAN_MspInit+0xa0>)
 80001f6:	f043 0304 	orr.w	r3, r3, #4
 80001fa:	6193      	str	r3, [r2, #24]
 80001fc:	4b16      	ldr	r3, [pc, #88]	; (8000258 <HAL_CAN_MspInit+0xa0>)
 80001fe:	699b      	ldr	r3, [r3, #24]
 8000200:	f003 0304 	and.w	r3, r3, #4
 8000204:	60bb      	str	r3, [r7, #8]
 8000206:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000208:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800020c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800020e:	2300      	movs	r3, #0
 8000210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000212:	2300      	movs	r3, #0
 8000214:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000216:	f107 0310 	add.w	r3, r7, #16
 800021a:	4619      	mov	r1, r3
 800021c:	480f      	ldr	r0, [pc, #60]	; (800025c <HAL_CAN_MspInit+0xa4>)
 800021e:	f001 fa6b 	bl	80016f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000222:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000226:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000228:	2302      	movs	r3, #2
 800022a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800022c:	2303      	movs	r3, #3
 800022e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000230:	f107 0310 	add.w	r3, r7, #16
 8000234:	4619      	mov	r1, r3
 8000236:	4809      	ldr	r0, [pc, #36]	; (800025c <HAL_CAN_MspInit+0xa4>)
 8000238:	f001 fa5e 	bl	80016f8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800023c:	2200      	movs	r2, #0
 800023e:	2100      	movs	r1, #0
 8000240:	2014      	movs	r0, #20
 8000242:	f001 fa22 	bl	800168a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000246:	2014      	movs	r0, #20
 8000248:	f001 fa3b 	bl	80016c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800024c:	bf00      	nop
 800024e:	3720      	adds	r7, #32
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	40006400 	.word	0x40006400
 8000258:	40021000 	.word	0x40021000
 800025c:	40010800 	.word	0x40010800

08000260 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b088      	sub	sp, #32
 8000264:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000266:	f107 0310 	add.w	r3, r7, #16
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
 800026e:	605a      	str	r2, [r3, #4]
 8000270:	609a      	str	r2, [r3, #8]
 8000272:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000274:	4b2e      	ldr	r3, [pc, #184]	; (8000330 <MX_GPIO_Init+0xd0>)
 8000276:	699b      	ldr	r3, [r3, #24]
 8000278:	4a2d      	ldr	r2, [pc, #180]	; (8000330 <MX_GPIO_Init+0xd0>)
 800027a:	f043 0310 	orr.w	r3, r3, #16
 800027e:	6193      	str	r3, [r2, #24]
 8000280:	4b2b      	ldr	r3, [pc, #172]	; (8000330 <MX_GPIO_Init+0xd0>)
 8000282:	699b      	ldr	r3, [r3, #24]
 8000284:	f003 0310 	and.w	r3, r3, #16
 8000288:	60fb      	str	r3, [r7, #12]
 800028a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800028c:	4b28      	ldr	r3, [pc, #160]	; (8000330 <MX_GPIO_Init+0xd0>)
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	4a27      	ldr	r2, [pc, #156]	; (8000330 <MX_GPIO_Init+0xd0>)
 8000292:	f043 0320 	orr.w	r3, r3, #32
 8000296:	6193      	str	r3, [r2, #24]
 8000298:	4b25      	ldr	r3, [pc, #148]	; (8000330 <MX_GPIO_Init+0xd0>)
 800029a:	699b      	ldr	r3, [r3, #24]
 800029c:	f003 0320 	and.w	r3, r3, #32
 80002a0:	60bb      	str	r3, [r7, #8]
 80002a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002a4:	4b22      	ldr	r3, [pc, #136]	; (8000330 <MX_GPIO_Init+0xd0>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	4a21      	ldr	r2, [pc, #132]	; (8000330 <MX_GPIO_Init+0xd0>)
 80002aa:	f043 0308 	orr.w	r3, r3, #8
 80002ae:	6193      	str	r3, [r2, #24]
 80002b0:	4b1f      	ldr	r3, [pc, #124]	; (8000330 <MX_GPIO_Init+0xd0>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	f003 0308 	and.w	r3, r3, #8
 80002b8:	607b      	str	r3, [r7, #4]
 80002ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002bc:	4b1c      	ldr	r3, [pc, #112]	; (8000330 <MX_GPIO_Init+0xd0>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	4a1b      	ldr	r2, [pc, #108]	; (8000330 <MX_GPIO_Init+0xd0>)
 80002c2:	f043 0304 	orr.w	r3, r3, #4
 80002c6:	6193      	str	r3, [r2, #24]
 80002c8:	4b19      	ldr	r3, [pc, #100]	; (8000330 <MX_GPIO_Init+0xd0>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	f003 0304 	and.w	r3, r3, #4
 80002d0:	603b      	str	r3, [r7, #0]
 80002d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ONBOARD_LED_GPIO_Port, ONBOARD_LED_Pin, GPIO_PIN_SET);
 80002d4:	2201      	movs	r2, #1
 80002d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002da:	4816      	ldr	r0, [pc, #88]	; (8000334 <MX_GPIO_Init+0xd4>)
 80002dc:	f001 fb90 	bl	8001a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, External_LED_RED_Pin|External_LED_GREEN_Pin, GPIO_PIN_RESET);
 80002e0:	2200      	movs	r2, #0
 80002e2:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80002e6:	4814      	ldr	r0, [pc, #80]	; (8000338 <MX_GPIO_Init+0xd8>)
 80002e8:	f001 fb8a 	bl	8001a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ONBOARD_LED_Pin;
 80002ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002f2:	2301      	movs	r3, #1
 80002f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f6:	2300      	movs	r3, #0
 80002f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002fa:	2302      	movs	r3, #2
 80002fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ONBOARD_LED_GPIO_Port, &GPIO_InitStruct);
 80002fe:	f107 0310 	add.w	r3, r7, #16
 8000302:	4619      	mov	r1, r3
 8000304:	480b      	ldr	r0, [pc, #44]	; (8000334 <MX_GPIO_Init+0xd4>)
 8000306:	f001 f9f7 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = External_LED_RED_Pin|External_LED_GREEN_Pin;
 800030a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800030e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000310:	2301      	movs	r3, #1
 8000312:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000314:	2300      	movs	r3, #0
 8000316:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000318:	2302      	movs	r3, #2
 800031a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800031c:	f107 0310 	add.w	r3, r7, #16
 8000320:	4619      	mov	r1, r3
 8000322:	4805      	ldr	r0, [pc, #20]	; (8000338 <MX_GPIO_Init+0xd8>)
 8000324:	f001 f9e8 	bl	80016f8 <HAL_GPIO_Init>

}
 8000328:	bf00      	nop
 800032a:	3720      	adds	r7, #32
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	40021000 	.word	0x40021000
 8000334:	40011000 	.word	0x40011000
 8000338:	40010c00 	.word	0x40010c00

0800033c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000342:	f000 fa29 	bl	8000798 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000346:	f000 f88d 	bl	8000464 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800034a:	f7ff ff89 	bl	8000260 <MX_GPIO_Init>
  MX_TIM2_Init();
 800034e:	f000 f989 	bl	8000664 <MX_TIM2_Init>
  MX_CAN_Init();
 8000352:	f7ff fefb 	bl	800014c <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000356:	4835      	ldr	r0, [pc, #212]	; (800042c <main+0xf0>)
 8000358:	f001 ffb2 	bl	80022c0 <HAL_TIM_Base_Start_IT>
  CAN_Filter_Config();
 800035c:	f000 f8e2 	bl	8000524 <CAN_Filter_Config>
  HAL_CAN_Start(&hcan);
 8000360:	4833      	ldr	r0, [pc, #204]	; (8000430 <main+0xf4>)
 8000362:	f000 fc3f 	bl	8000be4 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000366:	2102      	movs	r1, #2
 8000368:	4831      	ldr	r0, [pc, #196]	; (8000430 <main+0xf4>)
 800036a:	f000 fe6f 	bl	800104c <HAL_CAN_ActivateNotification>
  HAL_TIM_Base_Start_IT(&htim2);
 800036e:	482f      	ldr	r0, [pc, #188]	; (800042c <main+0xf0>)
 8000370:	f001 ffa6 	bl	80022c0 <HAL_TIM_Base_Start_IT>

  uint16_t voltaje_bateria = 0;
 8000374:	2300      	movs	r3, #0
 8000376:	81fb      	strh	r3, [r7, #14]
  uint8_t CanTxBuffer[8] = {0x02, 0x48, 0x01, 0x2C, 0x00, 0x00, 0x00, 0x00};
 8000378:	4a2e      	ldr	r2, [pc, #184]	; (8000434 <main+0xf8>)
 800037a:	1d3b      	adds	r3, r7, #4
 800037c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000380:	e883 0003 	stmia.w	r3, {r0, r1}
  //CanTxBuffer = data;
  //uint32_t txMailbox;

  txHeader.StdId = 0; // No se utiliza en el modo extendido
 8000384:	4b2c      	ldr	r3, [pc, #176]	; (8000438 <main+0xfc>)
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
  txHeader.ExtId = ID_EXT_BATERIA; // Identificador extendido
 800038a:	4b2b      	ldr	r3, [pc, #172]	; (8000438 <main+0xfc>)
 800038c:	4a2b      	ldr	r2, [pc, #172]	; (800043c <main+0x100>)
 800038e:	605a      	str	r2, [r3, #4]
  txHeader.RTR = CAN_RTR_DATA;
 8000390:	4b29      	ldr	r3, [pc, #164]	; (8000438 <main+0xfc>)
 8000392:	2200      	movs	r2, #0
 8000394:	60da      	str	r2, [r3, #12]
  txHeader.IDE = CAN_ID_EXT; // Usar identificador extendido
 8000396:	4b28      	ldr	r3, [pc, #160]	; (8000438 <main+0xfc>)
 8000398:	2204      	movs	r2, #4
 800039a:	609a      	str	r2, [r3, #8]
  txHeader.DLC = 8; // Longitud de datos
 800039c:	4b26      	ldr	r3, [pc, #152]	; (8000438 <main+0xfc>)
 800039e:	2208      	movs	r2, #8
 80003a0:	611a      	str	r2, [r3, #16]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(!led_timer && !flag_carga_completa){
 80003a2:	4b27      	ldr	r3, [pc, #156]	; (8000440 <main+0x104>)
 80003a4:	881b      	ldrh	r3, [r3, #0]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d112      	bne.n	80003d0 <main+0x94>
 80003aa:	4b26      	ldr	r3, [pc, #152]	; (8000444 <main+0x108>)
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d10e      	bne.n	80003d0 <main+0x94>
		  led_timer = 1000;
 80003b2:	4b23      	ldr	r3, [pc, #140]	; (8000440 <main+0x104>)
 80003b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003b8:	801a      	strh	r2, [r3, #0]
		  HAL_GPIO_TogglePin(ONBOARD_LED_GPIO_Port, ONBOARD_LED_Pin);
 80003ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003be:	4822      	ldr	r0, [pc, #136]	; (8000448 <main+0x10c>)
 80003c0:	f001 fb36 	bl	8001a30 <HAL_GPIO_TogglePin>
		  //HAL_GPIO_TogglePin(External_LED_RED_GPIO_Port, External_LED_RED_Pin);// Asume que el LED está conectado al pin GPIOB_PIN_0
		  //HAL_GPIO_TogglePin(External_LED_GREEN_GPIO_Port, External_LED_GREEN_Pin);// Asume que el LED está conectado al pin GPIOB_PIN_0
		  if (HAL_CAN_AddTxMessage(&hcan, &txHeader, CanTxBuffer, &CanMailBox) != HAL_OK) {
 80003c4:	1d3a      	adds	r2, r7, #4
 80003c6:	4b21      	ldr	r3, [pc, #132]	; (800044c <main+0x110>)
 80003c8:	491b      	ldr	r1, [pc, #108]	; (8000438 <main+0xfc>)
 80003ca:	4819      	ldr	r0, [pc, #100]	; (8000430 <main+0xf4>)
 80003cc:	f000 fc4e 	bl	8000c6c <HAL_CAN_AddTxMessage>
			  //HAL_GPIO_TogglePin(External_LED_RED_GPIO_Port, External_LED_RED_Pin);
		          // Error al enviar el mensaje
		      }
	  }
	  if(flag_rx){
 80003d0:	4b1f      	ldr	r3, [pc, #124]	; (8000450 <main+0x114>)
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d0e4      	beq.n	80003a2 <main+0x66>
		  if (rxHeader.IDE == CAN_ID_EXT && rxHeader.ExtId == 0x18FF50E5) {
 80003d8:	4b1e      	ldr	r3, [pc, #120]	; (8000454 <main+0x118>)
 80003da:	689b      	ldr	r3, [r3, #8]
 80003dc:	2b04      	cmp	r3, #4
 80003de:	d120      	bne.n	8000422 <main+0xe6>
 80003e0:	4b1c      	ldr	r3, [pc, #112]	; (8000454 <main+0x118>)
 80003e2:	685b      	ldr	r3, [r3, #4]
 80003e4:	4a1c      	ldr	r2, [pc, #112]	; (8000458 <main+0x11c>)
 80003e6:	4293      	cmp	r3, r2
 80003e8:	d11b      	bne.n	8000422 <main+0xe6>
			  // Cambiar el estado del LED
			  voltaje_bateria |= CanRxBuffer[0]<<8;
 80003ea:	4b1c      	ldr	r3, [pc, #112]	; (800045c <main+0x120>)
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	021b      	lsls	r3, r3, #8
 80003f0:	b21a      	sxth	r2, r3
 80003f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80003f6:	4313      	orrs	r3, r2
 80003f8:	b21b      	sxth	r3, r3
 80003fa:	81fb      	strh	r3, [r7, #14]
			  voltaje_bateria |= CanRxBuffer[1];
 80003fc:	4b17      	ldr	r3, [pc, #92]	; (800045c <main+0x120>)
 80003fe:	785b      	ldrb	r3, [r3, #1]
 8000400:	b29a      	uxth	r2, r3
 8000402:	89fb      	ldrh	r3, [r7, #14]
 8000404:	4313      	orrs	r3, r2
 8000406:	81fb      	strh	r3, [r7, #14]
			  if(voltaje_bateria == 534){
 8000408:	89fb      	ldrh	r3, [r7, #14]
 800040a:	f240 2216 	movw	r2, #534	; 0x216
 800040e:	4293      	cmp	r3, r2
 8000410:	d107      	bne.n	8000422 <main+0xe6>
				  HAL_GPIO_TogglePin(External_LED_RED_GPIO_Port, External_LED_RED_Pin);// Asume que el LED está conectado al pin GPIOB_PIN_0
 8000412:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000416:	4812      	ldr	r0, [pc, #72]	; (8000460 <main+0x124>)
 8000418:	f001 fb0a 	bl	8001a30 <HAL_GPIO_TogglePin>
				  flag_carga_completa = 1;
 800041c:	4b09      	ldr	r3, [pc, #36]	; (8000444 <main+0x108>)
 800041e:	2201      	movs	r2, #1
 8000420:	701a      	strb	r2, [r3, #0]
			  }

		  }
		  flag_rx=0;
 8000422:	4b0b      	ldr	r3, [pc, #44]	; (8000450 <main+0x114>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	  if(!led_timer && !flag_carga_completa){
 8000428:	e7bb      	b.n	80003a2 <main+0x66>
 800042a:	bf00      	nop
 800042c:	20000098 	.word	0x20000098
 8000430:	2000002c 	.word	0x2000002c
 8000434:	08002a8c 	.word	0x08002a8c
 8000438:	20000070 	.word	0x20000070
 800043c:	1806e5f4 	.word	0x1806e5f4
 8000440:	20000000 	.word	0x20000000
 8000444:	20000095 	.word	0x20000095
 8000448:	40011000 	.word	0x40011000
 800044c:	20000090 	.word	0x20000090
 8000450:	20000094 	.word	0x20000094
 8000454:	20000054 	.word	0x20000054
 8000458:	18ff50e5 	.word	0x18ff50e5
 800045c:	20000088 	.word	0x20000088
 8000460:	40010c00 	.word	0x40010c00

08000464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b090      	sub	sp, #64	; 0x40
 8000468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800046a:	f107 0318 	add.w	r3, r7, #24
 800046e:	2228      	movs	r2, #40	; 0x28
 8000470:	2100      	movs	r1, #0
 8000472:	4618      	mov	r0, r3
 8000474:	f002 fad2 	bl	8002a1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	605a      	str	r2, [r3, #4]
 8000480:	609a      	str	r2, [r3, #8]
 8000482:	60da      	str	r2, [r3, #12]
 8000484:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000486:	2301      	movs	r3, #1
 8000488:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800048a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800048e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000490:	2300      	movs	r3, #0
 8000492:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000494:	2301      	movs	r3, #1
 8000496:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000498:	2302      	movs	r3, #2
 800049a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800049c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004a2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a8:	f107 0318 	add.w	r3, r7, #24
 80004ac:	4618      	mov	r0, r3
 80004ae:	f001 fad9 	bl	8001a64 <HAL_RCC_OscConfig>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80004b8:	f000 f86a 	bl	8000590 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004bc:	230f      	movs	r3, #15
 80004be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004c0:	2302      	movs	r3, #2
 80004c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004c4:	2300      	movs	r3, #0
 80004c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ce:	2300      	movs	r3, #0
 80004d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	2102      	movs	r1, #2
 80004d6:	4618      	mov	r0, r3
 80004d8:	f001 fd46 	bl	8001f68 <HAL_RCC_ClockConfig>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004e2:	f000 f855 	bl	8000590 <Error_Handler>
  }
}
 80004e6:	bf00      	nop
 80004e8:	3740      	adds	r7, #64	; 0x40
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
	...

080004f0 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, CanRxBuffer) == HAL_OK){
 80004f8:	4b07      	ldr	r3, [pc, #28]	; (8000518 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80004fa:	4a08      	ldr	r2, [pc, #32]	; (800051c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80004fc:	2100      	movs	r1, #0
 80004fe:	6878      	ldr	r0, [r7, #4]
 8000500:	f000 fc83 	bl	8000e0a <HAL_CAN_GetRxMessage>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d102      	bne.n	8000510 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
		flag_rx = 1;
 800050a:	4b05      	ldr	r3, [pc, #20]	; (8000520 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800050c:	2201      	movs	r2, #1
 800050e:	701a      	strb	r2, [r3, #0]
	}
}
 8000510:	bf00      	nop
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	20000088 	.word	0x20000088
 800051c:	20000054 	.word	0x20000054
 8000520:	20000094 	.word	0x20000094

08000524 <CAN_Filter_Config>:

void CAN_Filter_Config(void) //Funcion para filtro can
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b08a      	sub	sp, #40	; 0x28
 8000528:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef filterConfig;
    filterConfig.FilterIdHigh = 0x0000;
 800052a:	2300      	movs	r3, #0
 800052c:	603b      	str	r3, [r7, #0]
    filterConfig.FilterIdLow = 0x0000;
 800052e:	2300      	movs	r3, #0
 8000530:	607b      	str	r3, [r7, #4]
    filterConfig.FilterMaskIdHigh = 0x0000;
 8000532:	2300      	movs	r3, #0
 8000534:	60bb      	str	r3, [r7, #8]
    filterConfig.FilterMaskIdLow = 0x0000;
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
    filterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800053a:	2300      	movs	r3, #0
 800053c:	613b      	str	r3, [r7, #16]
    filterConfig.FilterBank = 0;
 800053e:	2300      	movs	r3, #0
 8000540:	617b      	str	r3, [r7, #20]
    filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000542:	2300      	movs	r3, #0
 8000544:	61bb      	str	r3, [r7, #24]
    filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000546:	2301      	movs	r3, #1
 8000548:	61fb      	str	r3, [r7, #28]
	filterConfig.FilterActivation = ENABLE;
 800054a:	2301      	movs	r3, #1
 800054c:	623b      	str	r3, [r7, #32]

	if (HAL_CAN_ConfigFilter(&hcan, &filterConfig) != HAL_OK) {
 800054e:	463b      	mov	r3, r7
 8000550:	4619      	mov	r1, r3
 8000552:	4803      	ldr	r0, [pc, #12]	; (8000560 <CAN_Filter_Config+0x3c>)
 8000554:	f000 fa7d 	bl	8000a52 <HAL_CAN_ConfigFilter>
	            // Error en la configuración del filtro
	        }
}
 8000558:	bf00      	nop
 800055a:	3728      	adds	r7, #40	; 0x28
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	2000002c 	.word	0x2000002c

08000564 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	if(led_timer)
 800056c:	4b07      	ldr	r3, [pc, #28]	; (800058c <HAL_TIM_PeriodElapsedCallback+0x28>)
 800056e:	881b      	ldrh	r3, [r3, #0]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d005      	beq.n	8000580 <HAL_TIM_PeriodElapsedCallback+0x1c>
		led_timer--;
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000576:	881b      	ldrh	r3, [r3, #0]
 8000578:	3b01      	subs	r3, #1
 800057a:	b29a      	uxth	r2, r3
 800057c:	4b03      	ldr	r3, [pc, #12]	; (800058c <HAL_TIM_PeriodElapsedCallback+0x28>)
 800057e:	801a      	strh	r2, [r3, #0]
	if(htim->Instance == TIM2)  // Verifica que la interrupción provino de TIM2
	    {
	    }

}
 8000580:	bf00      	nop
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000000 	.word	0x20000000

08000590 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000594:	b672      	cpsid	i
}
 8000596:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000598:	e7fe      	b.n	8000598 <Error_Handler+0x8>
	...

0800059c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005a2:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <HAL_MspInit+0x40>)
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	4a0d      	ldr	r2, [pc, #52]	; (80005dc <HAL_MspInit+0x40>)
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	6193      	str	r3, [r2, #24]
 80005ae:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <HAL_MspInit+0x40>)
 80005b0:	699b      	ldr	r3, [r3, #24]
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ba:	4b08      	ldr	r3, [pc, #32]	; (80005dc <HAL_MspInit+0x40>)
 80005bc:	69db      	ldr	r3, [r3, #28]
 80005be:	4a07      	ldr	r2, [pc, #28]	; (80005dc <HAL_MspInit+0x40>)
 80005c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c4:	61d3      	str	r3, [r2, #28]
 80005c6:	4b05      	ldr	r3, [pc, #20]	; (80005dc <HAL_MspInit+0x40>)
 80005c8:	69db      	ldr	r3, [r3, #28]
 80005ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ce:	603b      	str	r3, [r7, #0]
 80005d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005d2:	bf00      	nop
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr
 80005dc:	40021000 	.word	0x40021000

080005e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005e4:	e7fe      	b.n	80005e4 <NMI_Handler+0x4>

080005e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005e6:	b480      	push	{r7}
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ea:	e7fe      	b.n	80005ea <HardFault_Handler+0x4>

080005ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <MemManage_Handler+0x4>

080005f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005f2:	b480      	push	{r7}
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005f6:	e7fe      	b.n	80005f6 <BusFault_Handler+0x4>

080005f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <UsageFault_Handler+0x4>

080005fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005fe:	b480      	push	{r7}
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000602:	bf00      	nop
 8000604:	46bd      	mov	sp, r7
 8000606:	bc80      	pop	{r7}
 8000608:	4770      	bx	lr

0800060a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800060a:	b480      	push	{r7}
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800060e:	bf00      	nop
 8000610:	46bd      	mov	sp, r7
 8000612:	bc80      	pop	{r7}
 8000614:	4770      	bx	lr

08000616 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000616:	b480      	push	{r7}
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800061a:	bf00      	nop
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr

08000622 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000622:	b580      	push	{r7, lr}
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000626:	f000 f8fd 	bl	8000824 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
	...

08000630 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000634:	4802      	ldr	r0, [pc, #8]	; (8000640 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000636:	f000 fd2e 	bl	8001096 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	2000002c 	.word	0x2000002c

08000644 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000648:	4802      	ldr	r0, [pc, #8]	; (8000654 <TIM2_IRQHandler+0x10>)
 800064a:	f001 fe8b 	bl	8002364 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000098 	.word	0x20000098

08000658 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr

08000664 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800066a:	f107 0308 	add.w	r3, r7, #8
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000678:	463b      	mov	r3, r7
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000680:	4b1f      	ldr	r3, [pc, #124]	; (8000700 <MX_TIM2_Init+0x9c>)
 8000682:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000686:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8000688:	4b1d      	ldr	r3, [pc, #116]	; (8000700 <MX_TIM2_Init+0x9c>)
 800068a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800068e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000690:	4b1b      	ldr	r3, [pc, #108]	; (8000700 <MX_TIM2_Init+0x9c>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000696:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <MX_TIM2_Init+0x9c>)
 8000698:	2209      	movs	r2, #9
 800069a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800069c:	4b18      	ldr	r3, [pc, #96]	; (8000700 <MX_TIM2_Init+0x9c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006a2:	4b17      	ldr	r3, [pc, #92]	; (8000700 <MX_TIM2_Init+0x9c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006a8:	4815      	ldr	r0, [pc, #84]	; (8000700 <MX_TIM2_Init+0x9c>)
 80006aa:	f001 fdb9 	bl	8002220 <HAL_TIM_Base_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80006b4:	f7ff ff6c 	bl	8000590 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006be:	f107 0308 	add.w	r3, r7, #8
 80006c2:	4619      	mov	r1, r3
 80006c4:	480e      	ldr	r0, [pc, #56]	; (8000700 <MX_TIM2_Init+0x9c>)
 80006c6:	f001 ff55 	bl	8002574 <HAL_TIM_ConfigClockSource>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80006d0:	f7ff ff5e 	bl	8000590 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d4:	2300      	movs	r3, #0
 80006d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006dc:	463b      	mov	r3, r7
 80006de:	4619      	mov	r1, r3
 80006e0:	4807      	ldr	r0, [pc, #28]	; (8000700 <MX_TIM2_Init+0x9c>)
 80006e2:	f002 f92b 	bl	800293c <HAL_TIMEx_MasterConfigSynchronization>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80006ec:	f7ff ff50 	bl	8000590 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80006f0:	201c      	movs	r0, #28
 80006f2:	f000 ffe6 	bl	80016c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM2_Init 2 */

}
 80006f6:	bf00      	nop
 80006f8:	3718      	adds	r7, #24
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000098 	.word	0x20000098

08000704 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000714:	d113      	bne.n	800073e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <HAL_TIM_Base_MspInit+0x44>)
 8000718:	69db      	ldr	r3, [r3, #28]
 800071a:	4a0b      	ldr	r2, [pc, #44]	; (8000748 <HAL_TIM_Base_MspInit+0x44>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	61d3      	str	r3, [r2, #28]
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <HAL_TIM_Base_MspInit+0x44>)
 8000724:	69db      	ldr	r3, [r3, #28]
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800072e:	2200      	movs	r2, #0
 8000730:	2100      	movs	r1, #0
 8000732:	201c      	movs	r0, #28
 8000734:	f000 ffa9 	bl	800168a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000738:	201c      	movs	r0, #28
 800073a:	f000 ffc2 	bl	80016c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800073e:	bf00      	nop
 8000740:	3710      	adds	r7, #16
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40021000 	.word	0x40021000

0800074c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800074c:	f7ff ff84 	bl	8000658 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000750:	480b      	ldr	r0, [pc, #44]	; (8000780 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000752:	490c      	ldr	r1, [pc, #48]	; (8000784 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000754:	4a0c      	ldr	r2, [pc, #48]	; (8000788 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000758:	e002      	b.n	8000760 <LoopCopyDataInit>

0800075a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800075a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800075c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800075e:	3304      	adds	r3, #4

08000760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000764:	d3f9      	bcc.n	800075a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000766:	4a09      	ldr	r2, [pc, #36]	; (800078c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000768:	4c09      	ldr	r4, [pc, #36]	; (8000790 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800076a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800076c:	e001      	b.n	8000772 <LoopFillZerobss>

0800076e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800076e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000770:	3204      	adds	r2, #4

08000772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000774:	d3fb      	bcc.n	800076e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000776:	f002 f959 	bl	8002a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800077a:	f7ff fddf 	bl	800033c <main>
  bx lr
 800077e:	4770      	bx	lr
  ldr r0, =_sdata
 8000780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000784:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000788:	08002ac0 	.word	0x08002ac0
  ldr r2, =_sbss
 800078c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000790:	200000e4 	.word	0x200000e4

08000794 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000794:	e7fe      	b.n	8000794 <ADC1_2_IRQHandler>
	...

08000798 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800079c:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <HAL_Init+0x28>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a07      	ldr	r2, [pc, #28]	; (80007c0 <HAL_Init+0x28>)
 80007a2:	f043 0310 	orr.w	r3, r3, #16
 80007a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007a8:	2003      	movs	r0, #3
 80007aa:	f000 ff63 	bl	8001674 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ae:	200f      	movs	r0, #15
 80007b0:	f000 f808 	bl	80007c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007b4:	f7ff fef2 	bl	800059c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007b8:	2300      	movs	r3, #0
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40022000 	.word	0x40022000

080007c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <HAL_InitTick+0x54>)
 80007ce:	681a      	ldr	r2, [r3, #0]
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <HAL_InitTick+0x58>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	4619      	mov	r1, r3
 80007d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007da:	fbb3 f3f1 	udiv	r3, r3, r1
 80007de:	fbb2 f3f3 	udiv	r3, r2, r3
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 ff7b 	bl	80016de <HAL_SYSTICK_Config>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007ee:	2301      	movs	r3, #1
 80007f0:	e00e      	b.n	8000810 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	2b0f      	cmp	r3, #15
 80007f6:	d80a      	bhi.n	800080e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007f8:	2200      	movs	r2, #0
 80007fa:	6879      	ldr	r1, [r7, #4]
 80007fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000800:	f000 ff43 	bl	800168a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000804:	4a06      	ldr	r2, [pc, #24]	; (8000820 <HAL_InitTick+0x5c>)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800080a:	2300      	movs	r3, #0
 800080c:	e000      	b.n	8000810 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800080e:	2301      	movs	r3, #1
}
 8000810:	4618      	mov	r0, r3
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000004 	.word	0x20000004
 800081c:	2000000c 	.word	0x2000000c
 8000820:	20000008 	.word	0x20000008

08000824 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <HAL_IncTick+0x1c>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	461a      	mov	r2, r3
 800082e:	4b05      	ldr	r3, [pc, #20]	; (8000844 <HAL_IncTick+0x20>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4413      	add	r3, r2
 8000834:	4a03      	ldr	r2, [pc, #12]	; (8000844 <HAL_IncTick+0x20>)
 8000836:	6013      	str	r3, [r2, #0]
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	bc80      	pop	{r7}
 800083e:	4770      	bx	lr
 8000840:	2000000c 	.word	0x2000000c
 8000844:	200000e0 	.word	0x200000e0

08000848 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  return uwTick;
 800084c:	4b02      	ldr	r3, [pc, #8]	; (8000858 <HAL_GetTick+0x10>)
 800084e:	681b      	ldr	r3, [r3, #0]
}
 8000850:	4618      	mov	r0, r3
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr
 8000858:	200000e0 	.word	0x200000e0

0800085c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d101      	bne.n	800086e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800086a:	2301      	movs	r3, #1
 800086c:	e0ed      	b.n	8000a4a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000874:	b2db      	uxtb	r3, r3
 8000876:	2b00      	cmp	r3, #0
 8000878:	d102      	bne.n	8000880 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f7ff fc9c 	bl	80001b8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f042 0201 	orr.w	r2, r2, #1
 800088e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000890:	f7ff ffda 	bl	8000848 <HAL_GetTick>
 8000894:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000896:	e012      	b.n	80008be <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000898:	f7ff ffd6 	bl	8000848 <HAL_GetTick>
 800089c:	4602      	mov	r2, r0
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	2b0a      	cmp	r3, #10
 80008a4:	d90b      	bls.n	80008be <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2205      	movs	r2, #5
 80008b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80008ba:	2301      	movs	r3, #1
 80008bc:	e0c5      	b.n	8000a4a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	f003 0301 	and.w	r3, r3, #1
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d0e5      	beq.n	8000898 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	681a      	ldr	r2, [r3, #0]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f022 0202 	bic.w	r2, r2, #2
 80008da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80008dc:	f7ff ffb4 	bl	8000848 <HAL_GetTick>
 80008e0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80008e2:	e012      	b.n	800090a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80008e4:	f7ff ffb0 	bl	8000848 <HAL_GetTick>
 80008e8:	4602      	mov	r2, r0
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	1ad3      	subs	r3, r2, r3
 80008ee:	2b0a      	cmp	r3, #10
 80008f0:	d90b      	bls.n	800090a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2205      	movs	r2, #5
 8000902:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000906:	2301      	movs	r3, #1
 8000908:	e09f      	b.n	8000a4a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	f003 0302 	and.w	r3, r3, #2
 8000914:	2b00      	cmp	r3, #0
 8000916:	d1e5      	bne.n	80008e4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	7e1b      	ldrb	r3, [r3, #24]
 800091c:	2b01      	cmp	r3, #1
 800091e:	d108      	bne.n	8000932 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	e007      	b.n	8000942 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000940:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	7e5b      	ldrb	r3, [r3, #25]
 8000946:	2b01      	cmp	r3, #1
 8000948:	d108      	bne.n	800095c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	e007      	b.n	800096c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800096a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	7e9b      	ldrb	r3, [r3, #26]
 8000970:	2b01      	cmp	r3, #1
 8000972:	d108      	bne.n	8000986 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f042 0220 	orr.w	r2, r2, #32
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	e007      	b.n	8000996 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f022 0220 	bic.w	r2, r2, #32
 8000994:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	7edb      	ldrb	r3, [r3, #27]
 800099a:	2b01      	cmp	r3, #1
 800099c:	d108      	bne.n	80009b0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f022 0210 	bic.w	r2, r2, #16
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	e007      	b.n	80009c0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f042 0210 	orr.w	r2, r2, #16
 80009be:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	7f1b      	ldrb	r3, [r3, #28]
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d108      	bne.n	80009da <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f042 0208 	orr.w	r2, r2, #8
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	e007      	b.n	80009ea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f022 0208 	bic.w	r2, r2, #8
 80009e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	7f5b      	ldrb	r3, [r3, #29]
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d108      	bne.n	8000a04 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f042 0204 	orr.w	r2, r2, #4
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	e007      	b.n	8000a14 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f022 0204 	bic.w	r2, r2, #4
 8000a12:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	689a      	ldr	r2, [r3, #8]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	431a      	orrs	r2, r3
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	691b      	ldr	r3, [r3, #16]
 8000a22:	431a      	orrs	r2, r3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	695b      	ldr	r3, [r3, #20]
 8000a28:	ea42 0103 	orr.w	r1, r2, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	1e5a      	subs	r2, r3, #1
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	430a      	orrs	r2, r1
 8000a38:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2201      	movs	r2, #1
 8000a44:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3710      	adds	r7, #16
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000a52:	b480      	push	{r7}
 8000a54:	b087      	sub	sp, #28
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]
 8000a5a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a68:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000a6a:	7cfb      	ldrb	r3, [r7, #19]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d003      	beq.n	8000a78 <HAL_CAN_ConfigFilter+0x26>
 8000a70:	7cfb      	ldrb	r3, [r7, #19]
 8000a72:	2b02      	cmp	r3, #2
 8000a74:	f040 80aa 	bne.w	8000bcc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000a7e:	f043 0201 	orr.w	r2, r3, #1
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	695b      	ldr	r3, [r3, #20]
 8000a8c:	f003 031f 	and.w	r3, r3, #31
 8000a90:	2201      	movs	r2, #1
 8000a92:	fa02 f303 	lsl.w	r3, r2, r3
 8000a96:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	43db      	mvns	r3, r3
 8000aa2:	401a      	ands	r2, r3
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	69db      	ldr	r3, [r3, #28]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d123      	bne.n	8000afa <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	43db      	mvns	r3, r3
 8000abc:	401a      	ands	r2, r3
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ad0:	683a      	ldr	r2, [r7, #0]
 8000ad2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ad4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	3248      	adds	r2, #72	; 0x48
 8000ada:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	689b      	ldr	r3, [r3, #8]
 8000ae2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000aee:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000af0:	6979      	ldr	r1, [r7, #20]
 8000af2:	3348      	adds	r3, #72	; 0x48
 8000af4:	00db      	lsls	r3, r3, #3
 8000af6:	440b      	add	r3, r1
 8000af8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	69db      	ldr	r3, [r3, #28]
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d122      	bne.n	8000b48 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	431a      	orrs	r2, r3
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b1e:	683a      	ldr	r2, [r7, #0]
 8000b20:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000b22:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	3248      	adds	r2, #72	; 0x48
 8000b28:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	68db      	ldr	r3, [r3, #12]
 8000b36:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b3c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b3e:	6979      	ldr	r1, [r7, #20]
 8000b40:	3348      	adds	r3, #72	; 0x48
 8000b42:	00db      	lsls	r3, r3, #3
 8000b44:	440b      	add	r3, r1
 8000b46:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d109      	bne.n	8000b64 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	43db      	mvns	r3, r3
 8000b5a:	401a      	ands	r2, r3
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000b62:	e007      	b.n	8000b74 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	431a      	orrs	r2, r3
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	691b      	ldr	r3, [r3, #16]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d109      	bne.n	8000b90 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	43db      	mvns	r3, r3
 8000b86:	401a      	ands	r2, r3
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000b8e:	e007      	b.n	8000ba0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	431a      	orrs	r2, r3
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	6a1b      	ldr	r3, [r3, #32]
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d107      	bne.n	8000bb8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	431a      	orrs	r2, r3
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000bbe:	f023 0201 	bic.w	r2, r3, #1
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	e006      	b.n	8000bda <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000bd8:	2301      	movs	r3, #1
  }
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	371c      	adds	r7, #28
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr

08000be4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d12e      	bne.n	8000c56 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2202      	movs	r2, #2
 8000bfc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f022 0201 	bic.w	r2, r2, #1
 8000c0e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000c10:	f7ff fe1a 	bl	8000848 <HAL_GetTick>
 8000c14:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000c16:	e012      	b.n	8000c3e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c18:	f7ff fe16 	bl	8000848 <HAL_GetTick>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	2b0a      	cmp	r3, #10
 8000c24:	d90b      	bls.n	8000c3e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c2a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2205      	movs	r2, #5
 8000c36:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e012      	b.n	8000c64 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f003 0301 	and.w	r3, r3, #1
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d1e5      	bne.n	8000c18 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000c52:	2300      	movs	r3, #0
 8000c54:	e006      	b.n	8000c64 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c5a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
  }
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3710      	adds	r7, #16
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b089      	sub	sp, #36	; 0x24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
 8000c78:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c80:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000c8a:	7ffb      	ldrb	r3, [r7, #31]
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d003      	beq.n	8000c98 <HAL_CAN_AddTxMessage+0x2c>
 8000c90:	7ffb      	ldrb	r3, [r7, #31]
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	f040 80ad 	bne.w	8000df2 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d10a      	bne.n	8000cb8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d105      	bne.n	8000cb8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f000 8095 	beq.w	8000de2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	0e1b      	lsrs	r3, r3, #24
 8000cbc:	f003 0303 	and.w	r3, r3, #3
 8000cc0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	409a      	lsls	r2, r3
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d10d      	bne.n	8000cf0 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000cde:	68f9      	ldr	r1, [r7, #12]
 8000ce0:	6809      	ldr	r1, [r1, #0]
 8000ce2:	431a      	orrs	r2, r3
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	3318      	adds	r3, #24
 8000ce8:	011b      	lsls	r3, r3, #4
 8000cea:	440b      	add	r3, r1
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	e00f      	b.n	8000d10 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000cfa:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d00:	68f9      	ldr	r1, [r7, #12]
 8000d02:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000d04:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	3318      	adds	r3, #24
 8000d0a:	011b      	lsls	r3, r3, #4
 8000d0c:	440b      	add	r3, r1
 8000d0e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	6819      	ldr	r1, [r3, #0]
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	691a      	ldr	r2, [r3, #16]
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	3318      	adds	r3, #24
 8000d1c:	011b      	lsls	r3, r3, #4
 8000d1e:	440b      	add	r3, r1
 8000d20:	3304      	adds	r3, #4
 8000d22:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	7d1b      	ldrb	r3, [r3, #20]
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d111      	bne.n	8000d50 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	3318      	adds	r3, #24
 8000d34:	011b      	lsls	r3, r3, #4
 8000d36:	4413      	add	r3, r2
 8000d38:	3304      	adds	r3, #4
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	68fa      	ldr	r2, [r7, #12]
 8000d3e:	6811      	ldr	r1, [r2, #0]
 8000d40:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	3318      	adds	r3, #24
 8000d48:	011b      	lsls	r3, r3, #4
 8000d4a:	440b      	add	r3, r1
 8000d4c:	3304      	adds	r3, #4
 8000d4e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3307      	adds	r3, #7
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	061a      	lsls	r2, r3, #24
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3306      	adds	r3, #6
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	041b      	lsls	r3, r3, #16
 8000d60:	431a      	orrs	r2, r3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	3305      	adds	r3, #5
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	021b      	lsls	r3, r3, #8
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	3204      	adds	r2, #4
 8000d70:	7812      	ldrb	r2, [r2, #0]
 8000d72:	4610      	mov	r0, r2
 8000d74:	68fa      	ldr	r2, [r7, #12]
 8000d76:	6811      	ldr	r1, [r2, #0]
 8000d78:	ea43 0200 	orr.w	r2, r3, r0
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	011b      	lsls	r3, r3, #4
 8000d80:	440b      	add	r3, r1
 8000d82:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000d86:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3303      	adds	r3, #3
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	061a      	lsls	r2, r3, #24
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3302      	adds	r3, #2
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	041b      	lsls	r3, r3, #16
 8000d98:	431a      	orrs	r2, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	021b      	lsls	r3, r3, #8
 8000da2:	4313      	orrs	r3, r2
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	7812      	ldrb	r2, [r2, #0]
 8000da8:	4610      	mov	r0, r2
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	6811      	ldr	r1, [r2, #0]
 8000dae:	ea43 0200 	orr.w	r2, r3, r0
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	011b      	lsls	r3, r3, #4
 8000db6:	440b      	add	r3, r1
 8000db8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000dbc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	3318      	adds	r3, #24
 8000dc6:	011b      	lsls	r3, r3, #4
 8000dc8:	4413      	add	r3, r2
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	68fa      	ldr	r2, [r7, #12]
 8000dce:	6811      	ldr	r1, [r2, #0]
 8000dd0:	f043 0201 	orr.w	r2, r3, #1
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	3318      	adds	r3, #24
 8000dd8:	011b      	lsls	r3, r3, #4
 8000dda:	440b      	add	r3, r1
 8000ddc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000dde:	2300      	movs	r3, #0
 8000de0:	e00e      	b.n	8000e00 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e006      	b.n	8000e00 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
  }
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3724      	adds	r7, #36	; 0x24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc80      	pop	{r7}
 8000e08:	4770      	bx	lr

08000e0a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	b087      	sub	sp, #28
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	60f8      	str	r0, [r7, #12]
 8000e12:	60b9      	str	r1, [r7, #8]
 8000e14:	607a      	str	r2, [r7, #4]
 8000e16:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e1e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e20:	7dfb      	ldrb	r3, [r7, #23]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d003      	beq.n	8000e2e <HAL_CAN_GetRxMessage+0x24>
 8000e26:	7dfb      	ldrb	r3, [r7, #23]
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	f040 8103 	bne.w	8001034 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d10e      	bne.n	8000e52 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	68db      	ldr	r3, [r3, #12]
 8000e3a:	f003 0303 	and.w	r3, r3, #3
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d116      	bne.n	8000e70 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e46:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e0f7      	b.n	8001042 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	691b      	ldr	r3, [r3, #16]
 8000e58:	f003 0303 	and.w	r3, r3, #3
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d107      	bne.n	8000e70 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e64:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e0e8      	b.n	8001042 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	331b      	adds	r3, #27
 8000e78:	011b      	lsls	r3, r3, #4
 8000e7a:	4413      	add	r3, r2
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f003 0204 	and.w	r2, r3, #4
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d10c      	bne.n	8000ea8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	331b      	adds	r3, #27
 8000e96:	011b      	lsls	r3, r3, #4
 8000e98:	4413      	add	r3, r2
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	0d5b      	lsrs	r3, r3, #21
 8000e9e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	e00b      	b.n	8000ec0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	331b      	adds	r3, #27
 8000eb0:	011b      	lsls	r3, r3, #4
 8000eb2:	4413      	add	r3, r2
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	08db      	lsrs	r3, r3, #3
 8000eb8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	331b      	adds	r3, #27
 8000ec8:	011b      	lsls	r3, r3, #4
 8000eca:	4413      	add	r3, r2
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 0202 	and.w	r2, r3, #2
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	331b      	adds	r3, #27
 8000ede:	011b      	lsls	r3, r3, #4
 8000ee0:	4413      	add	r3, r2
 8000ee2:	3304      	adds	r3, #4
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f003 0308 	and.w	r3, r3, #8
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d003      	beq.n	8000ef6 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2208      	movs	r2, #8
 8000ef2:	611a      	str	r2, [r3, #16]
 8000ef4:	e00b      	b.n	8000f0e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	331b      	adds	r3, #27
 8000efe:	011b      	lsls	r3, r3, #4
 8000f00:	4413      	add	r3, r2
 8000f02:	3304      	adds	r3, #4
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f003 020f 	and.w	r2, r3, #15
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	331b      	adds	r3, #27
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	4413      	add	r3, r2
 8000f1a:	3304      	adds	r3, #4
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	0a1b      	lsrs	r3, r3, #8
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	331b      	adds	r3, #27
 8000f2e:	011b      	lsls	r3, r3, #4
 8000f30:	4413      	add	r3, r2
 8000f32:	3304      	adds	r3, #4
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	0c1b      	lsrs	r3, r3, #16
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	011b      	lsls	r3, r3, #4
 8000f46:	4413      	add	r3, r2
 8000f48:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	011b      	lsls	r3, r3, #4
 8000f5c:	4413      	add	r3, r2
 8000f5e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	0a1a      	lsrs	r2, r3, #8
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	011b      	lsls	r3, r3, #4
 8000f76:	4413      	add	r3, r2
 8000f78:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	0c1a      	lsrs	r2, r3, #16
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	3302      	adds	r3, #2
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	011b      	lsls	r3, r3, #4
 8000f90:	4413      	add	r3, r2
 8000f92:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	0e1a      	lsrs	r2, r3, #24
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	3303      	adds	r3, #3
 8000f9e:	b2d2      	uxtb	r2, r2
 8000fa0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	011b      	lsls	r3, r3, #4
 8000faa:	4413      	add	r3, r2
 8000fac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	011b      	lsls	r3, r3, #4
 8000fc2:	4413      	add	r3, r2
 8000fc4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	0a1a      	lsrs	r2, r3, #8
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	3305      	adds	r3, #5
 8000fd0:	b2d2      	uxtb	r2, r2
 8000fd2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	011b      	lsls	r3, r3, #4
 8000fdc:	4413      	add	r3, r2
 8000fde:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	0c1a      	lsrs	r2, r3, #16
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	3306      	adds	r3, #6
 8000fea:	b2d2      	uxtb	r2, r2
 8000fec:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	011b      	lsls	r3, r3, #4
 8000ff6:	4413      	add	r3, r2
 8000ff8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	0e1a      	lsrs	r2, r3, #24
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	3307      	adds	r3, #7
 8001004:	b2d2      	uxtb	r2, r2
 8001006:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d108      	bne.n	8001020 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	68da      	ldr	r2, [r3, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f042 0220 	orr.w	r2, r2, #32
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	e007      	b.n	8001030 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	691a      	ldr	r2, [r3, #16]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f042 0220 	orr.w	r2, r2, #32
 800102e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001030:	2300      	movs	r3, #0
 8001032:	e006      	b.n	8001042 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001038:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
  }
}
 8001042:	4618      	mov	r0, r3
 8001044:	371c      	adds	r7, #28
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr

0800104c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f893 3020 	ldrb.w	r3, [r3, #32]
 800105c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d002      	beq.n	800106a <HAL_CAN_ActivateNotification+0x1e>
 8001064:	7bfb      	ldrb	r3, [r7, #15]
 8001066:	2b02      	cmp	r3, #2
 8001068:	d109      	bne.n	800107e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	6959      	ldr	r1, [r3, #20]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	683a      	ldr	r2, [r7, #0]
 8001076:	430a      	orrs	r2, r1
 8001078:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800107a:	2300      	movs	r3, #0
 800107c:	e006      	b.n	800108c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001082:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
  }
}
 800108c:	4618      	mov	r0, r3
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr

08001096 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b08a      	sub	sp, #40	; 0x28
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800109e:	2300      	movs	r3, #0
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	695b      	ldr	r3, [r3, #20]
 80010a8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	691b      	ldr	r3, [r3, #16]
 80010c8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80010d2:	6a3b      	ldr	r3, [r7, #32]
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d07c      	beq.n	80011d6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d023      	beq.n	800112e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2201      	movs	r2, #1
 80010ec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f000 f983 	bl	8001404 <HAL_CAN_TxMailbox0CompleteCallback>
 80010fe:	e016      	b.n	800112e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	f003 0304 	and.w	r3, r3, #4
 8001106:	2b00      	cmp	r3, #0
 8001108:	d004      	beq.n	8001114 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800110a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
 8001112:	e00c      	b.n	800112e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	f003 0308 	and.w	r3, r3, #8
 800111a:	2b00      	cmp	r3, #0
 800111c:	d004      	beq.n	8001128 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800111e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001120:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
 8001126:	e002      	b.n	800112e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f000 f986 	bl	800143a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001134:	2b00      	cmp	r3, #0
 8001136:	d024      	beq.n	8001182 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001140:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f000 f962 	bl	8001416 <HAL_CAN_TxMailbox1CompleteCallback>
 8001152:	e016      	b.n	8001182 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800115a:	2b00      	cmp	r3, #0
 800115c:	d004      	beq.n	8001168 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001160:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
 8001166:	e00c      	b.n	8001182 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800116e:	2b00      	cmp	r3, #0
 8001170:	d004      	beq.n	800117c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
 800117a:	e002      	b.n	8001182 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f000 f965 	bl	800144c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d024      	beq.n	80011d6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001194:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f000 f941 	bl	8001428 <HAL_CAN_TxMailbox2CompleteCallback>
 80011a6:	e016      	b.n	80011d6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d004      	beq.n	80011bc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80011b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
 80011ba:	e00c      	b.n	80011d6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d004      	beq.n	80011d0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80011c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
 80011ce:	e002      	b.n	80011d6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f000 f944 	bl	800145e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80011d6:	6a3b      	ldr	r3, [r7, #32]
 80011d8:	f003 0308 	and.w	r3, r3, #8
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d00c      	beq.n	80011fa <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	f003 0310 	and.w	r3, r3, #16
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d007      	beq.n	80011fa <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80011ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2210      	movs	r2, #16
 80011f8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80011fa:	6a3b      	ldr	r3, [r7, #32]
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	2b00      	cmp	r3, #0
 8001202:	d00b      	beq.n	800121c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f003 0308 	and.w	r3, r3, #8
 800120a:	2b00      	cmp	r3, #0
 800120c:	d006      	beq.n	800121c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2208      	movs	r2, #8
 8001214:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f000 f92a 	bl	8001470 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800121c:	6a3b      	ldr	r3, [r7, #32]
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d009      	beq.n	800123a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	f003 0303 	and.w	r3, r3, #3
 8001230:	2b00      	cmp	r3, #0
 8001232:	d002      	beq.n	800123a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff f95b 	bl	80004f0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800123a:	6a3b      	ldr	r3, [r7, #32]
 800123c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001240:	2b00      	cmp	r3, #0
 8001242:	d00c      	beq.n	800125e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	f003 0310 	and.w	r3, r3, #16
 800124a:	2b00      	cmp	r3, #0
 800124c:	d007      	beq.n	800125e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800124e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001250:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001254:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2210      	movs	r2, #16
 800125c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800125e:	6a3b      	ldr	r3, [r7, #32]
 8001260:	f003 0320 	and.w	r3, r3, #32
 8001264:	2b00      	cmp	r3, #0
 8001266:	d00b      	beq.n	8001280 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	f003 0308 	and.w	r3, r3, #8
 800126e:	2b00      	cmp	r3, #0
 8001270:	d006      	beq.n	8001280 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2208      	movs	r2, #8
 8001278:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f000 f90a 	bl	8001494 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001280:	6a3b      	ldr	r3, [r7, #32]
 8001282:	f003 0310 	and.w	r3, r3, #16
 8001286:	2b00      	cmp	r3, #0
 8001288:	d009      	beq.n	800129e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	691b      	ldr	r3, [r3, #16]
 8001290:	f003 0303 	and.w	r3, r3, #3
 8001294:	2b00      	cmp	r3, #0
 8001296:	d002      	beq.n	800129e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f000 f8f2 	bl	8001482 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800129e:	6a3b      	ldr	r3, [r7, #32]
 80012a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d00b      	beq.n	80012c0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f003 0310 	and.w	r3, r3, #16
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d006      	beq.n	80012c0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2210      	movs	r2, #16
 80012b8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f000 f8f3 	bl	80014a6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80012c0:	6a3b      	ldr	r3, [r7, #32]
 80012c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d00b      	beq.n	80012e2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	f003 0308 	and.w	r3, r3, #8
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d006      	beq.n	80012e2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2208      	movs	r2, #8
 80012da:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f000 f8eb 	bl	80014b8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80012e2:	6a3b      	ldr	r3, [r7, #32]
 80012e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d07b      	beq.n	80013e4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f003 0304 	and.w	r3, r3, #4
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d072      	beq.n	80013dc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80012f6:	6a3b      	ldr	r3, [r7, #32]
 80012f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d008      	beq.n	8001312 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800130a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001312:	6a3b      	ldr	r3, [r7, #32]
 8001314:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001318:	2b00      	cmp	r3, #0
 800131a:	d008      	beq.n	800132e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001328:	f043 0302 	orr.w	r3, r3, #2
 800132c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800132e:	6a3b      	ldr	r3, [r7, #32]
 8001330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001334:	2b00      	cmp	r3, #0
 8001336:	d008      	beq.n	800134a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001344:	f043 0304 	orr.w	r3, r3, #4
 8001348:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800134a:	6a3b      	ldr	r3, [r7, #32]
 800134c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001350:	2b00      	cmp	r3, #0
 8001352:	d043      	beq.n	80013dc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800135a:	2b00      	cmp	r3, #0
 800135c:	d03e      	beq.n	80013dc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001364:	2b60      	cmp	r3, #96	; 0x60
 8001366:	d02b      	beq.n	80013c0 <HAL_CAN_IRQHandler+0x32a>
 8001368:	2b60      	cmp	r3, #96	; 0x60
 800136a:	d82e      	bhi.n	80013ca <HAL_CAN_IRQHandler+0x334>
 800136c:	2b50      	cmp	r3, #80	; 0x50
 800136e:	d022      	beq.n	80013b6 <HAL_CAN_IRQHandler+0x320>
 8001370:	2b50      	cmp	r3, #80	; 0x50
 8001372:	d82a      	bhi.n	80013ca <HAL_CAN_IRQHandler+0x334>
 8001374:	2b40      	cmp	r3, #64	; 0x40
 8001376:	d019      	beq.n	80013ac <HAL_CAN_IRQHandler+0x316>
 8001378:	2b40      	cmp	r3, #64	; 0x40
 800137a:	d826      	bhi.n	80013ca <HAL_CAN_IRQHandler+0x334>
 800137c:	2b30      	cmp	r3, #48	; 0x30
 800137e:	d010      	beq.n	80013a2 <HAL_CAN_IRQHandler+0x30c>
 8001380:	2b30      	cmp	r3, #48	; 0x30
 8001382:	d822      	bhi.n	80013ca <HAL_CAN_IRQHandler+0x334>
 8001384:	2b10      	cmp	r3, #16
 8001386:	d002      	beq.n	800138e <HAL_CAN_IRQHandler+0x2f8>
 8001388:	2b20      	cmp	r3, #32
 800138a:	d005      	beq.n	8001398 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800138c:	e01d      	b.n	80013ca <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001390:	f043 0308 	orr.w	r3, r3, #8
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001396:	e019      	b.n	80013cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139a:	f043 0310 	orr.w	r3, r3, #16
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80013a0:	e014      	b.n	80013cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	f043 0320 	orr.w	r3, r3, #32
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80013aa:	e00f      	b.n	80013cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80013ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80013b4:	e00a      	b.n	80013cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80013b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80013be:	e005      	b.n	80013cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80013c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80013c8:	e000      	b.n	80013cc <HAL_CAN_IRQHandler+0x336>
            break;
 80013ca:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	699a      	ldr	r2, [r3, #24]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80013da:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2204      	movs	r2, #4
 80013e2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80013e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d008      	beq.n	80013fc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f0:	431a      	orrs	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f000 f867 	bl	80014ca <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80013fc:	bf00      	nop
 80013fe:	3728      	adds	r7, #40	; 0x28
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr

08001416 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001416:	b480      	push	{r7}
 8001418:	b083      	sub	sp, #12
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr

08001428 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr

0800143a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800143a:	b480      	push	{r7}
 800143c:	b083      	sub	sp, #12
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr

0800144c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr

0800145e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr

08001470 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr

08001482 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001482:	b480      	push	{r7}
 8001484:	b083      	sub	sp, #12
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr

08001494 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr

080014a6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr

080014b8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr

080014ca <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80014ca:	b480      	push	{r7}
 80014cc:	b083      	sub	sp, #12
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr

080014dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014ec:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <__NVIC_SetPriorityGrouping+0x44>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014f8:	4013      	ands	r3, r2
 80014fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001504:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800150c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800150e:	4a04      	ldr	r2, [pc, #16]	; (8001520 <__NVIC_SetPriorityGrouping+0x44>)
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	60d3      	str	r3, [r2, #12]
}
 8001514:	bf00      	nop
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001528:	4b04      	ldr	r3, [pc, #16]	; (800153c <__NVIC_GetPriorityGrouping+0x18>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	0a1b      	lsrs	r3, r3, #8
 800152e:	f003 0307 	and.w	r3, r3, #7
}
 8001532:	4618      	mov	r0, r3
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800154a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154e:	2b00      	cmp	r3, #0
 8001550:	db0b      	blt.n	800156a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	f003 021f 	and.w	r2, r3, #31
 8001558:	4906      	ldr	r1, [pc, #24]	; (8001574 <__NVIC_EnableIRQ+0x34>)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	095b      	lsrs	r3, r3, #5
 8001560:	2001      	movs	r0, #1
 8001562:	fa00 f202 	lsl.w	r2, r0, r2
 8001566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr
 8001574:	e000e100 	.word	0xe000e100

08001578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	6039      	str	r1, [r7, #0]
 8001582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001588:	2b00      	cmp	r3, #0
 800158a:	db0a      	blt.n	80015a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	b2da      	uxtb	r2, r3
 8001590:	490c      	ldr	r1, [pc, #48]	; (80015c4 <__NVIC_SetPriority+0x4c>)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	0112      	lsls	r2, r2, #4
 8001598:	b2d2      	uxtb	r2, r2
 800159a:	440b      	add	r3, r1
 800159c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a0:	e00a      	b.n	80015b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	4908      	ldr	r1, [pc, #32]	; (80015c8 <__NVIC_SetPriority+0x50>)
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	f003 030f 	and.w	r3, r3, #15
 80015ae:	3b04      	subs	r3, #4
 80015b0:	0112      	lsls	r2, r2, #4
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	440b      	add	r3, r1
 80015b6:	761a      	strb	r2, [r3, #24]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	e000e100 	.word	0xe000e100
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b089      	sub	sp, #36	; 0x24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	f1c3 0307 	rsb	r3, r3, #7
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	bf28      	it	cs
 80015ea:	2304      	movcs	r3, #4
 80015ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3304      	adds	r3, #4
 80015f2:	2b06      	cmp	r3, #6
 80015f4:	d902      	bls.n	80015fc <NVIC_EncodePriority+0x30>
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3b03      	subs	r3, #3
 80015fa:	e000      	b.n	80015fe <NVIC_EncodePriority+0x32>
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001600:	f04f 32ff 	mov.w	r2, #4294967295
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43da      	mvns	r2, r3
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	401a      	ands	r2, r3
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001614:	f04f 31ff 	mov.w	r1, #4294967295
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	fa01 f303 	lsl.w	r3, r1, r3
 800161e:	43d9      	mvns	r1, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001624:	4313      	orrs	r3, r2
         );
}
 8001626:	4618      	mov	r0, r3
 8001628:	3724      	adds	r7, #36	; 0x24
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr

08001630 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3b01      	subs	r3, #1
 800163c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001640:	d301      	bcc.n	8001646 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001642:	2301      	movs	r3, #1
 8001644:	e00f      	b.n	8001666 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001646:	4a0a      	ldr	r2, [pc, #40]	; (8001670 <SysTick_Config+0x40>)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3b01      	subs	r3, #1
 800164c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800164e:	210f      	movs	r1, #15
 8001650:	f04f 30ff 	mov.w	r0, #4294967295
 8001654:	f7ff ff90 	bl	8001578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001658:	4b05      	ldr	r3, [pc, #20]	; (8001670 <SysTick_Config+0x40>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800165e:	4b04      	ldr	r3, [pc, #16]	; (8001670 <SysTick_Config+0x40>)
 8001660:	2207      	movs	r2, #7
 8001662:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	e000e010 	.word	0xe000e010

08001674 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f7ff ff2d 	bl	80014dc <__NVIC_SetPriorityGrouping>
}
 8001682:	bf00      	nop
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800168a:	b580      	push	{r7, lr}
 800168c:	b086      	sub	sp, #24
 800168e:	af00      	add	r7, sp, #0
 8001690:	4603      	mov	r3, r0
 8001692:	60b9      	str	r1, [r7, #8]
 8001694:	607a      	str	r2, [r7, #4]
 8001696:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800169c:	f7ff ff42 	bl	8001524 <__NVIC_GetPriorityGrouping>
 80016a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	68b9      	ldr	r1, [r7, #8]
 80016a6:	6978      	ldr	r0, [r7, #20]
 80016a8:	f7ff ff90 	bl	80015cc <NVIC_EncodePriority>
 80016ac:	4602      	mov	r2, r0
 80016ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b2:	4611      	mov	r1, r2
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff ff5f 	bl	8001578 <__NVIC_SetPriority>
}
 80016ba:	bf00      	nop
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b082      	sub	sp, #8
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	4603      	mov	r3, r0
 80016ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff35 	bl	8001540 <__NVIC_EnableIRQ>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff ffa2 	bl	8001630 <SysTick_Config>
 80016ec:	4603      	mov	r3, r0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b08b      	sub	sp, #44	; 0x2c
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001702:	2300      	movs	r3, #0
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001706:	2300      	movs	r3, #0
 8001708:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800170a:	e169      	b.n	80019e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800170c:	2201      	movs	r2, #1
 800170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	69fa      	ldr	r2, [r7, #28]
 800171c:	4013      	ands	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	429a      	cmp	r2, r3
 8001726:	f040 8158 	bne.w	80019da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	4a9a      	ldr	r2, [pc, #616]	; (8001998 <HAL_GPIO_Init+0x2a0>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d05e      	beq.n	80017f2 <HAL_GPIO_Init+0xfa>
 8001734:	4a98      	ldr	r2, [pc, #608]	; (8001998 <HAL_GPIO_Init+0x2a0>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d875      	bhi.n	8001826 <HAL_GPIO_Init+0x12e>
 800173a:	4a98      	ldr	r2, [pc, #608]	; (800199c <HAL_GPIO_Init+0x2a4>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d058      	beq.n	80017f2 <HAL_GPIO_Init+0xfa>
 8001740:	4a96      	ldr	r2, [pc, #600]	; (800199c <HAL_GPIO_Init+0x2a4>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d86f      	bhi.n	8001826 <HAL_GPIO_Init+0x12e>
 8001746:	4a96      	ldr	r2, [pc, #600]	; (80019a0 <HAL_GPIO_Init+0x2a8>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d052      	beq.n	80017f2 <HAL_GPIO_Init+0xfa>
 800174c:	4a94      	ldr	r2, [pc, #592]	; (80019a0 <HAL_GPIO_Init+0x2a8>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d869      	bhi.n	8001826 <HAL_GPIO_Init+0x12e>
 8001752:	4a94      	ldr	r2, [pc, #592]	; (80019a4 <HAL_GPIO_Init+0x2ac>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d04c      	beq.n	80017f2 <HAL_GPIO_Init+0xfa>
 8001758:	4a92      	ldr	r2, [pc, #584]	; (80019a4 <HAL_GPIO_Init+0x2ac>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d863      	bhi.n	8001826 <HAL_GPIO_Init+0x12e>
 800175e:	4a92      	ldr	r2, [pc, #584]	; (80019a8 <HAL_GPIO_Init+0x2b0>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d046      	beq.n	80017f2 <HAL_GPIO_Init+0xfa>
 8001764:	4a90      	ldr	r2, [pc, #576]	; (80019a8 <HAL_GPIO_Init+0x2b0>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d85d      	bhi.n	8001826 <HAL_GPIO_Init+0x12e>
 800176a:	2b12      	cmp	r3, #18
 800176c:	d82a      	bhi.n	80017c4 <HAL_GPIO_Init+0xcc>
 800176e:	2b12      	cmp	r3, #18
 8001770:	d859      	bhi.n	8001826 <HAL_GPIO_Init+0x12e>
 8001772:	a201      	add	r2, pc, #4	; (adr r2, 8001778 <HAL_GPIO_Init+0x80>)
 8001774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001778:	080017f3 	.word	0x080017f3
 800177c:	080017cd 	.word	0x080017cd
 8001780:	080017df 	.word	0x080017df
 8001784:	08001821 	.word	0x08001821
 8001788:	08001827 	.word	0x08001827
 800178c:	08001827 	.word	0x08001827
 8001790:	08001827 	.word	0x08001827
 8001794:	08001827 	.word	0x08001827
 8001798:	08001827 	.word	0x08001827
 800179c:	08001827 	.word	0x08001827
 80017a0:	08001827 	.word	0x08001827
 80017a4:	08001827 	.word	0x08001827
 80017a8:	08001827 	.word	0x08001827
 80017ac:	08001827 	.word	0x08001827
 80017b0:	08001827 	.word	0x08001827
 80017b4:	08001827 	.word	0x08001827
 80017b8:	08001827 	.word	0x08001827
 80017bc:	080017d5 	.word	0x080017d5
 80017c0:	080017e9 	.word	0x080017e9
 80017c4:	4a79      	ldr	r2, [pc, #484]	; (80019ac <HAL_GPIO_Init+0x2b4>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d013      	beq.n	80017f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017ca:	e02c      	b.n	8001826 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	623b      	str	r3, [r7, #32]
          break;
 80017d2:	e029      	b.n	8001828 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	3304      	adds	r3, #4
 80017da:	623b      	str	r3, [r7, #32]
          break;
 80017dc:	e024      	b.n	8001828 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	3308      	adds	r3, #8
 80017e4:	623b      	str	r3, [r7, #32]
          break;
 80017e6:	e01f      	b.n	8001828 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	330c      	adds	r3, #12
 80017ee:	623b      	str	r3, [r7, #32]
          break;
 80017f0:	e01a      	b.n	8001828 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d102      	bne.n	8001800 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017fa:	2304      	movs	r3, #4
 80017fc:	623b      	str	r3, [r7, #32]
          break;
 80017fe:	e013      	b.n	8001828 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d105      	bne.n	8001814 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001808:	2308      	movs	r3, #8
 800180a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	69fa      	ldr	r2, [r7, #28]
 8001810:	611a      	str	r2, [r3, #16]
          break;
 8001812:	e009      	b.n	8001828 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001814:	2308      	movs	r3, #8
 8001816:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	69fa      	ldr	r2, [r7, #28]
 800181c:	615a      	str	r2, [r3, #20]
          break;
 800181e:	e003      	b.n	8001828 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001820:	2300      	movs	r3, #0
 8001822:	623b      	str	r3, [r7, #32]
          break;
 8001824:	e000      	b.n	8001828 <HAL_GPIO_Init+0x130>
          break;
 8001826:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	2bff      	cmp	r3, #255	; 0xff
 800182c:	d801      	bhi.n	8001832 <HAL_GPIO_Init+0x13a>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	e001      	b.n	8001836 <HAL_GPIO_Init+0x13e>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	3304      	adds	r3, #4
 8001836:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	2bff      	cmp	r3, #255	; 0xff
 800183c:	d802      	bhi.n	8001844 <HAL_GPIO_Init+0x14c>
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	e002      	b.n	800184a <HAL_GPIO_Init+0x152>
 8001844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001846:	3b08      	subs	r3, #8
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	210f      	movs	r1, #15
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	fa01 f303 	lsl.w	r3, r1, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	401a      	ands	r2, r3
 800185c:	6a39      	ldr	r1, [r7, #32]
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	fa01 f303 	lsl.w	r3, r1, r3
 8001864:	431a      	orrs	r2, r3
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	f000 80b1 	beq.w	80019da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001878:	4b4d      	ldr	r3, [pc, #308]	; (80019b0 <HAL_GPIO_Init+0x2b8>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	4a4c      	ldr	r2, [pc, #304]	; (80019b0 <HAL_GPIO_Init+0x2b8>)
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	6193      	str	r3, [r2, #24]
 8001884:	4b4a      	ldr	r3, [pc, #296]	; (80019b0 <HAL_GPIO_Init+0x2b8>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	60bb      	str	r3, [r7, #8]
 800188e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001890:	4a48      	ldr	r2, [pc, #288]	; (80019b4 <HAL_GPIO_Init+0x2bc>)
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	089b      	lsrs	r3, r3, #2
 8001896:	3302      	adds	r3, #2
 8001898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800189c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800189e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a0:	f003 0303 	and.w	r3, r3, #3
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	220f      	movs	r2, #15
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	43db      	mvns	r3, r3
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	4013      	ands	r3, r2
 80018b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a40      	ldr	r2, [pc, #256]	; (80019b8 <HAL_GPIO_Init+0x2c0>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d013      	beq.n	80018e4 <HAL_GPIO_Init+0x1ec>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a3f      	ldr	r2, [pc, #252]	; (80019bc <HAL_GPIO_Init+0x2c4>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d00d      	beq.n	80018e0 <HAL_GPIO_Init+0x1e8>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a3e      	ldr	r2, [pc, #248]	; (80019c0 <HAL_GPIO_Init+0x2c8>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d007      	beq.n	80018dc <HAL_GPIO_Init+0x1e4>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a3d      	ldr	r2, [pc, #244]	; (80019c4 <HAL_GPIO_Init+0x2cc>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d101      	bne.n	80018d8 <HAL_GPIO_Init+0x1e0>
 80018d4:	2303      	movs	r3, #3
 80018d6:	e006      	b.n	80018e6 <HAL_GPIO_Init+0x1ee>
 80018d8:	2304      	movs	r3, #4
 80018da:	e004      	b.n	80018e6 <HAL_GPIO_Init+0x1ee>
 80018dc:	2302      	movs	r3, #2
 80018de:	e002      	b.n	80018e6 <HAL_GPIO_Init+0x1ee>
 80018e0:	2301      	movs	r3, #1
 80018e2:	e000      	b.n	80018e6 <HAL_GPIO_Init+0x1ee>
 80018e4:	2300      	movs	r3, #0
 80018e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018e8:	f002 0203 	and.w	r2, r2, #3
 80018ec:	0092      	lsls	r2, r2, #2
 80018ee:	4093      	lsls	r3, r2
 80018f0:	68fa      	ldr	r2, [r7, #12]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018f6:	492f      	ldr	r1, [pc, #188]	; (80019b4 <HAL_GPIO_Init+0x2bc>)
 80018f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fa:	089b      	lsrs	r3, r3, #2
 80018fc:	3302      	adds	r3, #2
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d006      	beq.n	800191e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001910:	4b2d      	ldr	r3, [pc, #180]	; (80019c8 <HAL_GPIO_Init+0x2d0>)
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	492c      	ldr	r1, [pc, #176]	; (80019c8 <HAL_GPIO_Init+0x2d0>)
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	4313      	orrs	r3, r2
 800191a:	608b      	str	r3, [r1, #8]
 800191c:	e006      	b.n	800192c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800191e:	4b2a      	ldr	r3, [pc, #168]	; (80019c8 <HAL_GPIO_Init+0x2d0>)
 8001920:	689a      	ldr	r2, [r3, #8]
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	43db      	mvns	r3, r3
 8001926:	4928      	ldr	r1, [pc, #160]	; (80019c8 <HAL_GPIO_Init+0x2d0>)
 8001928:	4013      	ands	r3, r2
 800192a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d006      	beq.n	8001946 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001938:	4b23      	ldr	r3, [pc, #140]	; (80019c8 <HAL_GPIO_Init+0x2d0>)
 800193a:	68da      	ldr	r2, [r3, #12]
 800193c:	4922      	ldr	r1, [pc, #136]	; (80019c8 <HAL_GPIO_Init+0x2d0>)
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	4313      	orrs	r3, r2
 8001942:	60cb      	str	r3, [r1, #12]
 8001944:	e006      	b.n	8001954 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001946:	4b20      	ldr	r3, [pc, #128]	; (80019c8 <HAL_GPIO_Init+0x2d0>)
 8001948:	68da      	ldr	r2, [r3, #12]
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	43db      	mvns	r3, r3
 800194e:	491e      	ldr	r1, [pc, #120]	; (80019c8 <HAL_GPIO_Init+0x2d0>)
 8001950:	4013      	ands	r3, r2
 8001952:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d006      	beq.n	800196e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001960:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <HAL_GPIO_Init+0x2d0>)
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	4918      	ldr	r1, [pc, #96]	; (80019c8 <HAL_GPIO_Init+0x2d0>)
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	4313      	orrs	r3, r2
 800196a:	604b      	str	r3, [r1, #4]
 800196c:	e006      	b.n	800197c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800196e:	4b16      	ldr	r3, [pc, #88]	; (80019c8 <HAL_GPIO_Init+0x2d0>)
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	43db      	mvns	r3, r3
 8001976:	4914      	ldr	r1, [pc, #80]	; (80019c8 <HAL_GPIO_Init+0x2d0>)
 8001978:	4013      	ands	r3, r2
 800197a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d021      	beq.n	80019cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001988:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <HAL_GPIO_Init+0x2d0>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	490e      	ldr	r1, [pc, #56]	; (80019c8 <HAL_GPIO_Init+0x2d0>)
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	4313      	orrs	r3, r2
 8001992:	600b      	str	r3, [r1, #0]
 8001994:	e021      	b.n	80019da <HAL_GPIO_Init+0x2e2>
 8001996:	bf00      	nop
 8001998:	10320000 	.word	0x10320000
 800199c:	10310000 	.word	0x10310000
 80019a0:	10220000 	.word	0x10220000
 80019a4:	10210000 	.word	0x10210000
 80019a8:	10120000 	.word	0x10120000
 80019ac:	10110000 	.word	0x10110000
 80019b0:	40021000 	.word	0x40021000
 80019b4:	40010000 	.word	0x40010000
 80019b8:	40010800 	.word	0x40010800
 80019bc:	40010c00 	.word	0x40010c00
 80019c0:	40011000 	.word	0x40011000
 80019c4:	40011400 	.word	0x40011400
 80019c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019cc:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <HAL_GPIO_Init+0x304>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	43db      	mvns	r3, r3
 80019d4:	4909      	ldr	r1, [pc, #36]	; (80019fc <HAL_GPIO_Init+0x304>)
 80019d6:	4013      	ands	r3, r2
 80019d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	3301      	adds	r3, #1
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	fa22 f303 	lsr.w	r3, r2, r3
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f47f ae8e 	bne.w	800170c <HAL_GPIO_Init+0x14>
  }
}
 80019f0:	bf00      	nop
 80019f2:	bf00      	nop
 80019f4:	372c      	adds	r7, #44	; 0x2c
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr
 80019fc:	40010400 	.word	0x40010400

08001a00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	807b      	strh	r3, [r7, #2]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a10:	787b      	ldrb	r3, [r7, #1]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a16:	887a      	ldrh	r2, [r7, #2]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a1c:	e003      	b.n	8001a26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a1e:	887b      	ldrh	r3, [r7, #2]
 8001a20:	041a      	lsls	r2, r3, #16
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	611a      	str	r2, [r3, #16]
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr

08001a30 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a42:	887a      	ldrh	r2, [r7, #2]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	4013      	ands	r3, r2
 8001a48:	041a      	lsls	r2, r3, #16
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	43d9      	mvns	r1, r3
 8001a4e:	887b      	ldrh	r3, [r7, #2]
 8001a50:	400b      	ands	r3, r1
 8001a52:	431a      	orrs	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	611a      	str	r2, [r3, #16]
}
 8001a58:	bf00      	nop
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr
	...

08001a64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e272      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 8087 	beq.w	8001b92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a84:	4b92      	ldr	r3, [pc, #584]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 030c 	and.w	r3, r3, #12
 8001a8c:	2b04      	cmp	r3, #4
 8001a8e:	d00c      	beq.n	8001aaa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a90:	4b8f      	ldr	r3, [pc, #572]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 030c 	and.w	r3, r3, #12
 8001a98:	2b08      	cmp	r3, #8
 8001a9a:	d112      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x5e>
 8001a9c:	4b8c      	ldr	r3, [pc, #560]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa8:	d10b      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aaa:	4b89      	ldr	r3, [pc, #548]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d06c      	beq.n	8001b90 <HAL_RCC_OscConfig+0x12c>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d168      	bne.n	8001b90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e24c      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aca:	d106      	bne.n	8001ada <HAL_RCC_OscConfig+0x76>
 8001acc:	4b80      	ldr	r3, [pc, #512]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a7f      	ldr	r2, [pc, #508]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad6:	6013      	str	r3, [r2, #0]
 8001ad8:	e02e      	b.n	8001b38 <HAL_RCC_OscConfig+0xd4>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10c      	bne.n	8001afc <HAL_RCC_OscConfig+0x98>
 8001ae2:	4b7b      	ldr	r3, [pc, #492]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a7a      	ldr	r2, [pc, #488]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	4b78      	ldr	r3, [pc, #480]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a77      	ldr	r2, [pc, #476]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	e01d      	b.n	8001b38 <HAL_RCC_OscConfig+0xd4>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b04:	d10c      	bne.n	8001b20 <HAL_RCC_OscConfig+0xbc>
 8001b06:	4b72      	ldr	r3, [pc, #456]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a71      	ldr	r2, [pc, #452]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	4b6f      	ldr	r3, [pc, #444]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a6e      	ldr	r2, [pc, #440]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	e00b      	b.n	8001b38 <HAL_RCC_OscConfig+0xd4>
 8001b20:	4b6b      	ldr	r3, [pc, #428]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a6a      	ldr	r2, [pc, #424]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b2a:	6013      	str	r3, [r2, #0]
 8001b2c:	4b68      	ldr	r3, [pc, #416]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a67      	ldr	r2, [pc, #412]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d013      	beq.n	8001b68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b40:	f7fe fe82 	bl	8000848 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b48:	f7fe fe7e 	bl	8000848 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b64      	cmp	r3, #100	; 0x64
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e200      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5a:	4b5d      	ldr	r3, [pc, #372]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0f0      	beq.n	8001b48 <HAL_RCC_OscConfig+0xe4>
 8001b66:	e014      	b.n	8001b92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b68:	f7fe fe6e 	bl	8000848 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b70:	f7fe fe6a 	bl	8000848 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b64      	cmp	r3, #100	; 0x64
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e1ec      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b82:	4b53      	ldr	r3, [pc, #332]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f0      	bne.n	8001b70 <HAL_RCC_OscConfig+0x10c>
 8001b8e:	e000      	b.n	8001b92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d063      	beq.n	8001c66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b9e:	4b4c      	ldr	r3, [pc, #304]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f003 030c 	and.w	r3, r3, #12
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00b      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001baa:	4b49      	ldr	r3, [pc, #292]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 030c 	and.w	r3, r3, #12
 8001bb2:	2b08      	cmp	r3, #8
 8001bb4:	d11c      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x18c>
 8001bb6:	4b46      	ldr	r3, [pc, #280]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d116      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc2:	4b43      	ldr	r3, [pc, #268]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d005      	beq.n	8001bda <HAL_RCC_OscConfig+0x176>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d001      	beq.n	8001bda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e1c0      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bda:	4b3d      	ldr	r3, [pc, #244]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	4939      	ldr	r1, [pc, #228]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bee:	e03a      	b.n	8001c66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d020      	beq.n	8001c3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bf8:	4b36      	ldr	r3, [pc, #216]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfe:	f7fe fe23 	bl	8000848 <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c06:	f7fe fe1f 	bl	8000848 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e1a1      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c18:	4b2d      	ldr	r3, [pc, #180]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0f0      	beq.n	8001c06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c24:	4b2a      	ldr	r3, [pc, #168]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	4927      	ldr	r1, [pc, #156]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	600b      	str	r3, [r1, #0]
 8001c38:	e015      	b.n	8001c66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c3a:	4b26      	ldr	r3, [pc, #152]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c40:	f7fe fe02 	bl	8000848 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c48:	f7fe fdfe 	bl	8000848 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e180      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c5a:	4b1d      	ldr	r3, [pc, #116]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d03a      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d019      	beq.n	8001cae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c7a:	4b17      	ldr	r3, [pc, #92]	; (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c80:	f7fe fde2 	bl	8000848 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c88:	f7fe fdde 	bl	8000848 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e160      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c9a:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0f0      	beq.n	8001c88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ca6:	2001      	movs	r0, #1
 8001ca8:	f000 fa9c 	bl	80021e4 <RCC_Delay>
 8001cac:	e01c      	b.n	8001ce8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cae:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb4:	f7fe fdc8 	bl	8000848 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cba:	e00f      	b.n	8001cdc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cbc:	f7fe fdc4 	bl	8000848 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d908      	bls.n	8001cdc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e146      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
 8001cce:	bf00      	nop
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	42420000 	.word	0x42420000
 8001cd8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cdc:	4b92      	ldr	r3, [pc, #584]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1e9      	bne.n	8001cbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f000 80a6 	beq.w	8001e42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cfa:	4b8b      	ldr	r3, [pc, #556]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10d      	bne.n	8001d22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d06:	4b88      	ldr	r3, [pc, #544]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	4a87      	ldr	r2, [pc, #540]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d10:	61d3      	str	r3, [r2, #28]
 8001d12:	4b85      	ldr	r3, [pc, #532]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d22:	4b82      	ldr	r3, [pc, #520]	; (8001f2c <HAL_RCC_OscConfig+0x4c8>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d118      	bne.n	8001d60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d2e:	4b7f      	ldr	r3, [pc, #508]	; (8001f2c <HAL_RCC_OscConfig+0x4c8>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a7e      	ldr	r2, [pc, #504]	; (8001f2c <HAL_RCC_OscConfig+0x4c8>)
 8001d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d3a:	f7fe fd85 	bl	8000848 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d42:	f7fe fd81 	bl	8000848 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b64      	cmp	r3, #100	; 0x64
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e103      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d54:	4b75      	ldr	r3, [pc, #468]	; (8001f2c <HAL_RCC_OscConfig+0x4c8>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0f0      	beq.n	8001d42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d106      	bne.n	8001d76 <HAL_RCC_OscConfig+0x312>
 8001d68:	4b6f      	ldr	r3, [pc, #444]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	4a6e      	ldr	r2, [pc, #440]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	6213      	str	r3, [r2, #32]
 8001d74:	e02d      	b.n	8001dd2 <HAL_RCC_OscConfig+0x36e>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10c      	bne.n	8001d98 <HAL_RCC_OscConfig+0x334>
 8001d7e:	4b6a      	ldr	r3, [pc, #424]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	4a69      	ldr	r2, [pc, #420]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d84:	f023 0301 	bic.w	r3, r3, #1
 8001d88:	6213      	str	r3, [r2, #32]
 8001d8a:	4b67      	ldr	r3, [pc, #412]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	4a66      	ldr	r2, [pc, #408]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001d90:	f023 0304 	bic.w	r3, r3, #4
 8001d94:	6213      	str	r3, [r2, #32]
 8001d96:	e01c      	b.n	8001dd2 <HAL_RCC_OscConfig+0x36e>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	2b05      	cmp	r3, #5
 8001d9e:	d10c      	bne.n	8001dba <HAL_RCC_OscConfig+0x356>
 8001da0:	4b61      	ldr	r3, [pc, #388]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	4a60      	ldr	r2, [pc, #384]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001da6:	f043 0304 	orr.w	r3, r3, #4
 8001daa:	6213      	str	r3, [r2, #32]
 8001dac:	4b5e      	ldr	r3, [pc, #376]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	4a5d      	ldr	r2, [pc, #372]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	6213      	str	r3, [r2, #32]
 8001db8:	e00b      	b.n	8001dd2 <HAL_RCC_OscConfig+0x36e>
 8001dba:	4b5b      	ldr	r3, [pc, #364]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001dbc:	6a1b      	ldr	r3, [r3, #32]
 8001dbe:	4a5a      	ldr	r2, [pc, #360]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001dc0:	f023 0301 	bic.w	r3, r3, #1
 8001dc4:	6213      	str	r3, [r2, #32]
 8001dc6:	4b58      	ldr	r3, [pc, #352]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	4a57      	ldr	r2, [pc, #348]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001dcc:	f023 0304 	bic.w	r3, r3, #4
 8001dd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d015      	beq.n	8001e06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dda:	f7fe fd35 	bl	8000848 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de0:	e00a      	b.n	8001df8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de2:	f7fe fd31 	bl	8000848 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e0b1      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df8:	4b4b      	ldr	r3, [pc, #300]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0ee      	beq.n	8001de2 <HAL_RCC_OscConfig+0x37e>
 8001e04:	e014      	b.n	8001e30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e06:	f7fe fd1f 	bl	8000848 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e0c:	e00a      	b.n	8001e24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e0e:	f7fe fd1b 	bl	8000848 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e09b      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e24:	4b40      	ldr	r3, [pc, #256]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1ee      	bne.n	8001e0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e30:	7dfb      	ldrb	r3, [r7, #23]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d105      	bne.n	8001e42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e36:	4b3c      	ldr	r3, [pc, #240]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	4a3b      	ldr	r2, [pc, #236]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001e3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 8087 	beq.w	8001f5a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e4c:	4b36      	ldr	r3, [pc, #216]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 030c 	and.w	r3, r3, #12
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d061      	beq.n	8001f1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69db      	ldr	r3, [r3, #28]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d146      	bne.n	8001eee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e60:	4b33      	ldr	r3, [pc, #204]	; (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e66:	f7fe fcef 	bl	8000848 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6e:	f7fe fceb 	bl	8000848 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e06d      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e80:	4b29      	ldr	r3, [pc, #164]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1f0      	bne.n	8001e6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
 8001e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e94:	d108      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e96:	4b24      	ldr	r3, [pc, #144]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	4921      	ldr	r1, [pc, #132]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ea8:	4b1f      	ldr	r3, [pc, #124]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a19      	ldr	r1, [r3, #32]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	430b      	orrs	r3, r1
 8001eba:	491b      	ldr	r1, [pc, #108]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ec0:	4b1b      	ldr	r3, [pc, #108]	; (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec6:	f7fe fcbf 	bl	8000848 <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ece:	f7fe fcbb 	bl	8000848 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e03d      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ee0:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0f0      	beq.n	8001ece <HAL_RCC_OscConfig+0x46a>
 8001eec:	e035      	b.n	8001f5a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eee:	4b10      	ldr	r3, [pc, #64]	; (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef4:	f7fe fca8 	bl	8000848 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001efc:	f7fe fca4 	bl	8000848 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e026      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f0e:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <HAL_RCC_OscConfig+0x4c4>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f0      	bne.n	8001efc <HAL_RCC_OscConfig+0x498>
 8001f1a:	e01e      	b.n	8001f5a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	69db      	ldr	r3, [r3, #28]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d107      	bne.n	8001f34 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e019      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	40007000 	.word	0x40007000
 8001f30:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <HAL_RCC_OscConfig+0x500>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d106      	bne.n	8001f56 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d001      	beq.n	8001f5a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e000      	b.n	8001f5c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40021000 	.word	0x40021000

08001f68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e0d0      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f7c:	4b6a      	ldr	r3, [pc, #424]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d910      	bls.n	8001fac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8a:	4b67      	ldr	r3, [pc, #412]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f023 0207 	bic.w	r2, r3, #7
 8001f92:	4965      	ldr	r1, [pc, #404]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9a:	4b63      	ldr	r3, [pc, #396]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d001      	beq.n	8001fac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e0b8      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d020      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d005      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fc4:	4b59      	ldr	r3, [pc, #356]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	4a58      	ldr	r2, [pc, #352]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001fca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0308 	and.w	r3, r3, #8
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d005      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fdc:	4b53      	ldr	r3, [pc, #332]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	4a52      	ldr	r2, [pc, #328]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001fe2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fe6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe8:	4b50      	ldr	r3, [pc, #320]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	494d      	ldr	r1, [pc, #308]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	d040      	beq.n	8002088 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d107      	bne.n	800201e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200e:	4b47      	ldr	r3, [pc, #284]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d115      	bne.n	8002046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e07f      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d107      	bne.n	8002036 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002026:	4b41      	ldr	r3, [pc, #260]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d109      	bne.n	8002046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e073      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002036:	4b3d      	ldr	r3, [pc, #244]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e06b      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002046:	4b39      	ldr	r3, [pc, #228]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f023 0203 	bic.w	r2, r3, #3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	4936      	ldr	r1, [pc, #216]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002054:	4313      	orrs	r3, r2
 8002056:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002058:	f7fe fbf6 	bl	8000848 <HAL_GetTick>
 800205c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205e:	e00a      	b.n	8002076 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002060:	f7fe fbf2 	bl	8000848 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	f241 3288 	movw	r2, #5000	; 0x1388
 800206e:	4293      	cmp	r3, r2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e053      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002076:	4b2d      	ldr	r3, [pc, #180]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 020c 	and.w	r2, r3, #12
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	429a      	cmp	r2, r3
 8002086:	d1eb      	bne.n	8002060 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002088:	4b27      	ldr	r3, [pc, #156]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	429a      	cmp	r2, r3
 8002094:	d210      	bcs.n	80020b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002096:	4b24      	ldr	r3, [pc, #144]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f023 0207 	bic.w	r2, r3, #7
 800209e:	4922      	ldr	r1, [pc, #136]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a6:	4b20      	ldr	r3, [pc, #128]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d001      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e032      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d008      	beq.n	80020d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020c4:	4b19      	ldr	r3, [pc, #100]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	4916      	ldr	r1, [pc, #88]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d009      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020e2:	4b12      	ldr	r3, [pc, #72]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	490e      	ldr	r1, [pc, #56]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020f6:	f000 f821 	bl	800213c <HAL_RCC_GetSysClockFreq>
 80020fa:	4602      	mov	r2, r0
 80020fc:	4b0b      	ldr	r3, [pc, #44]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	091b      	lsrs	r3, r3, #4
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	490a      	ldr	r1, [pc, #40]	; (8002130 <HAL_RCC_ClockConfig+0x1c8>)
 8002108:	5ccb      	ldrb	r3, [r1, r3]
 800210a:	fa22 f303 	lsr.w	r3, r2, r3
 800210e:	4a09      	ldr	r2, [pc, #36]	; (8002134 <HAL_RCC_ClockConfig+0x1cc>)
 8002110:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002112:	4b09      	ldr	r3, [pc, #36]	; (8002138 <HAL_RCC_ClockConfig+0x1d0>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe fb54 	bl	80007c4 <HAL_InitTick>

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40022000 	.word	0x40022000
 800212c:	40021000 	.word	0x40021000
 8002130:	08002a94 	.word	0x08002a94
 8002134:	20000004 	.word	0x20000004
 8002138:	20000008 	.word	0x20000008

0800213c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800213c:	b480      	push	{r7}
 800213e:	b087      	sub	sp, #28
 8002140:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002142:	2300      	movs	r3, #0
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	2300      	movs	r3, #0
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]
 800214e:	2300      	movs	r3, #0
 8002150:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002152:	2300      	movs	r3, #0
 8002154:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002156:	4b1e      	ldr	r3, [pc, #120]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f003 030c 	and.w	r3, r3, #12
 8002162:	2b04      	cmp	r3, #4
 8002164:	d002      	beq.n	800216c <HAL_RCC_GetSysClockFreq+0x30>
 8002166:	2b08      	cmp	r3, #8
 8002168:	d003      	beq.n	8002172 <HAL_RCC_GetSysClockFreq+0x36>
 800216a:	e027      	b.n	80021bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800216c:	4b19      	ldr	r3, [pc, #100]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800216e:	613b      	str	r3, [r7, #16]
      break;
 8002170:	e027      	b.n	80021c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	0c9b      	lsrs	r3, r3, #18
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	4a17      	ldr	r2, [pc, #92]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800217c:	5cd3      	ldrb	r3, [r2, r3]
 800217e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d010      	beq.n	80021ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800218a:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	0c5b      	lsrs	r3, r3, #17
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	4a11      	ldr	r2, [pc, #68]	; (80021dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002196:	5cd3      	ldrb	r3, [r2, r3]
 8002198:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a0d      	ldr	r2, [pc, #52]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800219e:	fb03 f202 	mul.w	r2, r3, r2
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a8:	617b      	str	r3, [r7, #20]
 80021aa:	e004      	b.n	80021b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a0c      	ldr	r2, [pc, #48]	; (80021e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80021b0:	fb02 f303 	mul.w	r3, r2, r3
 80021b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	613b      	str	r3, [r7, #16]
      break;
 80021ba:	e002      	b.n	80021c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021bc:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80021be:	613b      	str	r3, [r7, #16]
      break;
 80021c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021c2:	693b      	ldr	r3, [r7, #16]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	371c      	adds	r7, #28
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bc80      	pop	{r7}
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40021000 	.word	0x40021000
 80021d4:	007a1200 	.word	0x007a1200
 80021d8:	08002aa4 	.word	0x08002aa4
 80021dc:	08002ab4 	.word	0x08002ab4
 80021e0:	003d0900 	.word	0x003d0900

080021e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021ec:	4b0a      	ldr	r3, [pc, #40]	; (8002218 <RCC_Delay+0x34>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a0a      	ldr	r2, [pc, #40]	; (800221c <RCC_Delay+0x38>)
 80021f2:	fba2 2303 	umull	r2, r3, r2, r3
 80021f6:	0a5b      	lsrs	r3, r3, #9
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	fb02 f303 	mul.w	r3, r2, r3
 80021fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002200:	bf00      	nop
  }
  while (Delay --);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	1e5a      	subs	r2, r3, #1
 8002206:	60fa      	str	r2, [r7, #12]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1f9      	bne.n	8002200 <RCC_Delay+0x1c>
}
 800220c:	bf00      	nop
 800220e:	bf00      	nop
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr
 8002218:	20000004 	.word	0x20000004
 800221c:	10624dd3 	.word	0x10624dd3

08002220 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e041      	b.n	80022b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d106      	bne.n	800224c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7fe fa5c 	bl	8000704 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2202      	movs	r2, #2
 8002250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3304      	adds	r3, #4
 800225c:	4619      	mov	r1, r3
 800225e:	4610      	mov	r0, r2
 8002260:	f000 fa74 	bl	800274c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
	...

080022c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d001      	beq.n	80022d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e03a      	b.n	800234e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2202      	movs	r2, #2
 80022dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68da      	ldr	r2, [r3, #12]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0201 	orr.w	r2, r2, #1
 80022ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a18      	ldr	r2, [pc, #96]	; (8002358 <HAL_TIM_Base_Start_IT+0x98>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d00e      	beq.n	8002318 <HAL_TIM_Base_Start_IT+0x58>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002302:	d009      	beq.n	8002318 <HAL_TIM_Base_Start_IT+0x58>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a14      	ldr	r2, [pc, #80]	; (800235c <HAL_TIM_Base_Start_IT+0x9c>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d004      	beq.n	8002318 <HAL_TIM_Base_Start_IT+0x58>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a13      	ldr	r2, [pc, #76]	; (8002360 <HAL_TIM_Base_Start_IT+0xa0>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d111      	bne.n	800233c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2b06      	cmp	r3, #6
 8002328:	d010      	beq.n	800234c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f042 0201 	orr.w	r2, r2, #1
 8002338:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800233a:	e007      	b.n	800234c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f042 0201 	orr.w	r2, r2, #1
 800234a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr
 8002358:	40012c00 	.word	0x40012c00
 800235c:	40000400 	.word	0x40000400
 8002360:	40000800 	.word	0x40000800

08002364 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b02      	cmp	r3, #2
 8002378:	d122      	bne.n	80023c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b02      	cmp	r3, #2
 8002386:	d11b      	bne.n	80023c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f06f 0202 	mvn.w	r2, #2
 8002390:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 f9b4 	bl	8002714 <HAL_TIM_IC_CaptureCallback>
 80023ac:	e005      	b.n	80023ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f9a7 	bl	8002702 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 f9b6 	bl	8002726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	d122      	bne.n	8002414 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b04      	cmp	r3, #4
 80023da:	d11b      	bne.n	8002414 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f06f 0204 	mvn.w	r2, #4
 80023e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2202      	movs	r2, #2
 80023ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f98a 	bl	8002714 <HAL_TIM_IC_CaptureCallback>
 8002400:	e005      	b.n	800240e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 f97d 	bl	8002702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 f98c 	bl	8002726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	f003 0308 	and.w	r3, r3, #8
 800241e:	2b08      	cmp	r3, #8
 8002420:	d122      	bne.n	8002468 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	f003 0308 	and.w	r3, r3, #8
 800242c:	2b08      	cmp	r3, #8
 800242e:	d11b      	bne.n	8002468 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f06f 0208 	mvn.w	r2, #8
 8002438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2204      	movs	r2, #4
 800243e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 f960 	bl	8002714 <HAL_TIM_IC_CaptureCallback>
 8002454:	e005      	b.n	8002462 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 f953 	bl	8002702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 f962 	bl	8002726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	f003 0310 	and.w	r3, r3, #16
 8002472:	2b10      	cmp	r3, #16
 8002474:	d122      	bne.n	80024bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	f003 0310 	and.w	r3, r3, #16
 8002480:	2b10      	cmp	r3, #16
 8002482:	d11b      	bne.n	80024bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f06f 0210 	mvn.w	r2, #16
 800248c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2208      	movs	r2, #8
 8002492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 f936 	bl	8002714 <HAL_TIM_IC_CaptureCallback>
 80024a8:	e005      	b.n	80024b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f929 	bl	8002702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 f938 	bl	8002726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d10e      	bne.n	80024e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d107      	bne.n	80024e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f06f 0201 	mvn.w	r2, #1
 80024e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f7fe f83e 	bl	8000564 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f2:	2b80      	cmp	r3, #128	; 0x80
 80024f4:	d10e      	bne.n	8002514 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002500:	2b80      	cmp	r3, #128	; 0x80
 8002502:	d107      	bne.n	8002514 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800250c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 fa7b 	bl	8002a0a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800251e:	2b40      	cmp	r3, #64	; 0x40
 8002520:	d10e      	bne.n	8002540 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800252c:	2b40      	cmp	r3, #64	; 0x40
 800252e:	d107      	bne.n	8002540 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f8fc 	bl	8002738 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	f003 0320 	and.w	r3, r3, #32
 800254a:	2b20      	cmp	r3, #32
 800254c:	d10e      	bne.n	800256c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	f003 0320 	and.w	r3, r3, #32
 8002558:	2b20      	cmp	r3, #32
 800255a:	d107      	bne.n	800256c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f06f 0220 	mvn.w	r2, #32
 8002564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 fa46 	bl	80029f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800256c:	bf00      	nop
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002588:	2b01      	cmp	r3, #1
 800258a:	d101      	bne.n	8002590 <HAL_TIM_ConfigClockSource+0x1c>
 800258c:	2302      	movs	r3, #2
 800258e:	e0b4      	b.n	80026fa <HAL_TIM_ConfigClockSource+0x186>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2202      	movs	r2, #2
 800259c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80025ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025c8:	d03e      	beq.n	8002648 <HAL_TIM_ConfigClockSource+0xd4>
 80025ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025ce:	f200 8087 	bhi.w	80026e0 <HAL_TIM_ConfigClockSource+0x16c>
 80025d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025d6:	f000 8086 	beq.w	80026e6 <HAL_TIM_ConfigClockSource+0x172>
 80025da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025de:	d87f      	bhi.n	80026e0 <HAL_TIM_ConfigClockSource+0x16c>
 80025e0:	2b70      	cmp	r3, #112	; 0x70
 80025e2:	d01a      	beq.n	800261a <HAL_TIM_ConfigClockSource+0xa6>
 80025e4:	2b70      	cmp	r3, #112	; 0x70
 80025e6:	d87b      	bhi.n	80026e0 <HAL_TIM_ConfigClockSource+0x16c>
 80025e8:	2b60      	cmp	r3, #96	; 0x60
 80025ea:	d050      	beq.n	800268e <HAL_TIM_ConfigClockSource+0x11a>
 80025ec:	2b60      	cmp	r3, #96	; 0x60
 80025ee:	d877      	bhi.n	80026e0 <HAL_TIM_ConfigClockSource+0x16c>
 80025f0:	2b50      	cmp	r3, #80	; 0x50
 80025f2:	d03c      	beq.n	800266e <HAL_TIM_ConfigClockSource+0xfa>
 80025f4:	2b50      	cmp	r3, #80	; 0x50
 80025f6:	d873      	bhi.n	80026e0 <HAL_TIM_ConfigClockSource+0x16c>
 80025f8:	2b40      	cmp	r3, #64	; 0x40
 80025fa:	d058      	beq.n	80026ae <HAL_TIM_ConfigClockSource+0x13a>
 80025fc:	2b40      	cmp	r3, #64	; 0x40
 80025fe:	d86f      	bhi.n	80026e0 <HAL_TIM_ConfigClockSource+0x16c>
 8002600:	2b30      	cmp	r3, #48	; 0x30
 8002602:	d064      	beq.n	80026ce <HAL_TIM_ConfigClockSource+0x15a>
 8002604:	2b30      	cmp	r3, #48	; 0x30
 8002606:	d86b      	bhi.n	80026e0 <HAL_TIM_ConfigClockSource+0x16c>
 8002608:	2b20      	cmp	r3, #32
 800260a:	d060      	beq.n	80026ce <HAL_TIM_ConfigClockSource+0x15a>
 800260c:	2b20      	cmp	r3, #32
 800260e:	d867      	bhi.n	80026e0 <HAL_TIM_ConfigClockSource+0x16c>
 8002610:	2b00      	cmp	r3, #0
 8002612:	d05c      	beq.n	80026ce <HAL_TIM_ConfigClockSource+0x15a>
 8002614:	2b10      	cmp	r3, #16
 8002616:	d05a      	beq.n	80026ce <HAL_TIM_ConfigClockSource+0x15a>
 8002618:	e062      	b.n	80026e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800262a:	f000 f968 	bl	80028fe <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800263c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68ba      	ldr	r2, [r7, #8]
 8002644:	609a      	str	r2, [r3, #8]
      break;
 8002646:	e04f      	b.n	80026e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002658:	f000 f951 	bl	80028fe <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689a      	ldr	r2, [r3, #8]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800266a:	609a      	str	r2, [r3, #8]
      break;
 800266c:	e03c      	b.n	80026e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800267a:	461a      	mov	r2, r3
 800267c:	f000 f8c8 	bl	8002810 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2150      	movs	r1, #80	; 0x50
 8002686:	4618      	mov	r0, r3
 8002688:	f000 f91f 	bl	80028ca <TIM_ITRx_SetConfig>
      break;
 800268c:	e02c      	b.n	80026e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800269a:	461a      	mov	r2, r3
 800269c:	f000 f8e6 	bl	800286c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2160      	movs	r1, #96	; 0x60
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 f90f 	bl	80028ca <TIM_ITRx_SetConfig>
      break;
 80026ac:	e01c      	b.n	80026e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026ba:	461a      	mov	r2, r3
 80026bc:	f000 f8a8 	bl	8002810 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2140      	movs	r1, #64	; 0x40
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 f8ff 	bl	80028ca <TIM_ITRx_SetConfig>
      break;
 80026cc:	e00c      	b.n	80026e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4619      	mov	r1, r3
 80026d8:	4610      	mov	r0, r2
 80026da:	f000 f8f6 	bl	80028ca <TIM_ITRx_SetConfig>
      break;
 80026de:	e003      	b.n	80026e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	73fb      	strb	r3, [r7, #15]
      break;
 80026e4:	e000      	b.n	80026e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80026e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr

08002714 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	bc80      	pop	{r7}
 8002724:	4770      	bx	lr

08002726 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr

08002738 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	bc80      	pop	{r7}
 8002748:	4770      	bx	lr
	...

0800274c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a29      	ldr	r2, [pc, #164]	; (8002804 <TIM_Base_SetConfig+0xb8>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d00b      	beq.n	800277c <TIM_Base_SetConfig+0x30>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800276a:	d007      	beq.n	800277c <TIM_Base_SetConfig+0x30>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a26      	ldr	r2, [pc, #152]	; (8002808 <TIM_Base_SetConfig+0xbc>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d003      	beq.n	800277c <TIM_Base_SetConfig+0x30>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a25      	ldr	r2, [pc, #148]	; (800280c <TIM_Base_SetConfig+0xc0>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d108      	bne.n	800278e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002782:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	4313      	orrs	r3, r2
 800278c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a1c      	ldr	r2, [pc, #112]	; (8002804 <TIM_Base_SetConfig+0xb8>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d00b      	beq.n	80027ae <TIM_Base_SetConfig+0x62>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800279c:	d007      	beq.n	80027ae <TIM_Base_SetConfig+0x62>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a19      	ldr	r2, [pc, #100]	; (8002808 <TIM_Base_SetConfig+0xbc>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d003      	beq.n	80027ae <TIM_Base_SetConfig+0x62>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a18      	ldr	r2, [pc, #96]	; (800280c <TIM_Base_SetConfig+0xc0>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d108      	bne.n	80027c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	4313      	orrs	r3, r2
 80027be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a07      	ldr	r2, [pc, #28]	; (8002804 <TIM_Base_SetConfig+0xb8>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d103      	bne.n	80027f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	691a      	ldr	r2, [r3, #16]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	615a      	str	r2, [r3, #20]
}
 80027fa:	bf00      	nop
 80027fc:	3714      	adds	r7, #20
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc80      	pop	{r7}
 8002802:	4770      	bx	lr
 8002804:	40012c00 	.word	0x40012c00
 8002808:	40000400 	.word	0x40000400
 800280c:	40000800 	.word	0x40000800

08002810 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002810:	b480      	push	{r7}
 8002812:	b087      	sub	sp, #28
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	f023 0201 	bic.w	r2, r3, #1
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800283a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	011b      	lsls	r3, r3, #4
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	4313      	orrs	r3, r2
 8002844:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	f023 030a 	bic.w	r3, r3, #10
 800284c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	4313      	orrs	r3, r2
 8002854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	621a      	str	r2, [r3, #32]
}
 8002862:	bf00      	nop
 8002864:	371c      	adds	r7, #28
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr

0800286c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800286c:	b480      	push	{r7}
 800286e:	b087      	sub	sp, #28
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	f023 0210 	bic.w	r2, r3, #16
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002896:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	031b      	lsls	r3, r3, #12
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	4313      	orrs	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	011b      	lsls	r3, r3, #4
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	621a      	str	r2, [r3, #32]
}
 80028c0:	bf00      	nop
 80028c2:	371c      	adds	r7, #28
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr

080028ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b085      	sub	sp, #20
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
 80028d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f043 0307 	orr.w	r3, r3, #7
 80028ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	609a      	str	r2, [r3, #8]
}
 80028f4:	bf00      	nop
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bc80      	pop	{r7}
 80028fc:	4770      	bx	lr

080028fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028fe:	b480      	push	{r7}
 8002900:	b087      	sub	sp, #28
 8002902:	af00      	add	r7, sp, #0
 8002904:	60f8      	str	r0, [r7, #12]
 8002906:	60b9      	str	r1, [r7, #8]
 8002908:	607a      	str	r2, [r7, #4]
 800290a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002918:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	021a      	lsls	r2, r3, #8
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	431a      	orrs	r2, r3
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	4313      	orrs	r3, r2
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	4313      	orrs	r3, r2
 800292a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	609a      	str	r2, [r3, #8]
}
 8002932:	bf00      	nop
 8002934:	371c      	adds	r7, #28
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr

0800293c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800294c:	2b01      	cmp	r3, #1
 800294e:	d101      	bne.n	8002954 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002950:	2302      	movs	r3, #2
 8002952:	e046      	b.n	80029e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2202      	movs	r2, #2
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800297a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	4313      	orrs	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a16      	ldr	r2, [pc, #88]	; (80029ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d00e      	beq.n	80029b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a0:	d009      	beq.n	80029b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a12      	ldr	r2, [pc, #72]	; (80029f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d004      	beq.n	80029b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a10      	ldr	r2, [pc, #64]	; (80029f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d10c      	bne.n	80029d0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	68ba      	ldr	r2, [r7, #8]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68ba      	ldr	r2, [r7, #8]
 80029ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr
 80029ec:	40012c00 	.word	0x40012c00
 80029f0:	40000400 	.word	0x40000400
 80029f4:	40000800 	.word	0x40000800

080029f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bc80      	pop	{r7}
 8002a08:	4770      	bx	lr

08002a0a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr

08002a1c <memset>:
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	4402      	add	r2, r0
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d100      	bne.n	8002a26 <memset+0xa>
 8002a24:	4770      	bx	lr
 8002a26:	f803 1b01 	strb.w	r1, [r3], #1
 8002a2a:	e7f9      	b.n	8002a20 <memset+0x4>

08002a2c <__libc_init_array>:
 8002a2c:	b570      	push	{r4, r5, r6, lr}
 8002a2e:	2600      	movs	r6, #0
 8002a30:	4d0c      	ldr	r5, [pc, #48]	; (8002a64 <__libc_init_array+0x38>)
 8002a32:	4c0d      	ldr	r4, [pc, #52]	; (8002a68 <__libc_init_array+0x3c>)
 8002a34:	1b64      	subs	r4, r4, r5
 8002a36:	10a4      	asrs	r4, r4, #2
 8002a38:	42a6      	cmp	r6, r4
 8002a3a:	d109      	bne.n	8002a50 <__libc_init_array+0x24>
 8002a3c:	f000 f81a 	bl	8002a74 <_init>
 8002a40:	2600      	movs	r6, #0
 8002a42:	4d0a      	ldr	r5, [pc, #40]	; (8002a6c <__libc_init_array+0x40>)
 8002a44:	4c0a      	ldr	r4, [pc, #40]	; (8002a70 <__libc_init_array+0x44>)
 8002a46:	1b64      	subs	r4, r4, r5
 8002a48:	10a4      	asrs	r4, r4, #2
 8002a4a:	42a6      	cmp	r6, r4
 8002a4c:	d105      	bne.n	8002a5a <__libc_init_array+0x2e>
 8002a4e:	bd70      	pop	{r4, r5, r6, pc}
 8002a50:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a54:	4798      	blx	r3
 8002a56:	3601      	adds	r6, #1
 8002a58:	e7ee      	b.n	8002a38 <__libc_init_array+0xc>
 8002a5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a5e:	4798      	blx	r3
 8002a60:	3601      	adds	r6, #1
 8002a62:	e7f2      	b.n	8002a4a <__libc_init_array+0x1e>
 8002a64:	08002ab8 	.word	0x08002ab8
 8002a68:	08002ab8 	.word	0x08002ab8
 8002a6c:	08002ab8 	.word	0x08002ab8
 8002a70:	08002abc 	.word	0x08002abc

08002a74 <_init>:
 8002a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a76:	bf00      	nop
 8002a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a7a:	bc08      	pop	{r3}
 8002a7c:	469e      	mov	lr, r3
 8002a7e:	4770      	bx	lr

08002a80 <_fini>:
 8002a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a82:	bf00      	nop
 8002a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a86:	bc08      	pop	{r3}
 8002a88:	469e      	mov	lr, r3
 8002a8a:	4770      	bx	lr
